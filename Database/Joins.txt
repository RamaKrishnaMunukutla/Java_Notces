 
   
   emptab~~~~~~~~~~ eid, ename, esal, did
   deptab~~~~~~~~~~ did, dloc, dprj

 SELECT * FROM rama.addrtab;
  select * from rama.addrtab;
  desc rama.addrtab;
  
                    MySQL ----> "UNION" In-Place of FULL-JOIN (**************)
					
 Combine 3 tables ---> Required 2-Joins Statement. 
 
  Count(*) ---- GROUP BY (Can apply on Mutiple Columns also)
  
  
  drop database test;
  create database test;
  use test;
  
=====================================================================================================================
   
 Copy Sructure :=
~~~~~~~~~~~~~~~
  CREATE TABLE dom AS SELECT * FROM students WHERE 1=2;



 Insert Record from One-Table to another with Same ID :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Insert into dom select * from students  where Student_ID =103;
 
 
  Delete Record from Multiple Table with Same ID :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   delete  e,ss from employee e inner join students ss on e.Student_ID = ss.Student_ID where  e.Student_ID = 102;
  
=====================================================================================================================
 
 MySQL WorkBench ---> https://www.youtube.com/watch?v=uKwR9fWsZJ4&ab_channel=edureka%21
 
  SQL Queries Prcatise -----> W3-Resource ////  GeeksForGeeks


 RowNum :=
~~~~~~~~~~~


 (Q) How to prevent SQL Injections ??
 (A) By using Prepared Statements && Parameterized queries .
 
 
======================================================================================
 
 Joins :=   
~~~~~~~~~~
SELECT a.*
	FROM  job_history a 
		JOIN employees m 
			ON (a.employee_id = m.employee_id)
WHERE salary >= 12000;


SELECT E.first_name, E.last_name, E.department_id 
 FROM employees E 
   JOIN employees S
     ON E.department_id = S.department_id
       AND S.last_name = 'Taylor';
	   
	   
SELECT job_title, department_name, first_name || ' ' || last_name AS Employee_name, start_date 
	FROM job_history 
		JOIN jobs USING (job_id) 
			JOIN departments USING (department_id) 
				JOIN  employees USING (employee_id) 
					WHERE start_date>='1993-01-01' AND start_date<='1997-08-31';	


SELECT first_name || ' ' || last_name as Full_Name, hire_date,  
 salary,  department_id
  FROM employees
   WHERE first_name NOT LIKE '%M%'
     ORDER BY department_id;
	 
	 
SELECT DISTINCT department_id
	FROM employees
		GROUP BY department_id, manager_id 
			HAVING COUNT(employee_id) >=4;	 
	 
	 
SELECT * 
	FROM employees 
		WHERE commission_pct IS NULL 
			AND salary BETWEEN 7000 AND 12000 
				AND department_id=50;	 
	 
	 
SELECT employee_id, first_name, job_id, department_id
 FROM employees
  WHERE department_id IN (30 , 40 , 90);


SELECT first_name,last_name, department_id
 FROM employees
  WHERE first_name LIKE '__s%';


SELECT first_name ||' '||last_name AS Full_Name, hire_date , 
  commission_pct, email ||' -  '||phone_number AS Contact_Details, salary 
     FROM employees 
       WHERE salary > 11000
        OR phone_number LIKE '______3%'
          ORDER BY first_name DESC;
		  
 
 Print First && Last Recrod form Table :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  select 
		  
=============================================================		  
  
 Inner Join := common values are displayed from 2 tables.
 ~~~~~~~~~~
 
 
 Left Outer Join :=
~~~~~~~~~~~~~~~~~~
 returns all the records from left table and also those records which satisfy the condition from right table.If no matching found then ResultSet returns NULL.

 Eg:= select  emptab.eid, emptab.ename, addrtab.emploc from emptab left join addrtab on emptab.eid= addrtab.eid;


 Right Outer Join :=
~~~~~~~~~~~~~~~~~~~
 returns all the records from Right table and also those records which satisfy the condition from left table.If no matching found then ResultSet returns NULL.
 
 Eg:= select  emptab.eid, emptab.ename, addrtab.eloc from emptab right join addrtab on emptab.eid= addrtab.eid; 


 Full Outer Join :=
~~~~~~~~~~~~~~~~~~
All the values from  left  table which satisfy the condition of right table and Viceversa.

Eg:= select  emptab.eid, emptab.ename, addrtab.eloc from emptab  left join  addrtab on emptab.eid = addrtab.eid; 
 union
 select  emptab.eid, emptab.ename, addrtab.eloc from emptab  right join  addrtab on emptab.eid = addrtab.eid; 
 
======================================================================================
Left Outer Join:=
~~~~~~~~~~~~~~~
Retrives the matching  valves from all tables but unmatching data from left-hand-side only.

                           ( unmatching rows at left~~ Null at right[missing] )

Eg:=  select * from emptab e left outer join addrtab d on e.eid= d.eid;


SELECT a.cust_name,a.city, b.ord_no,
b.ord_date,b.purch_amt AS "Order Amount", 
c.name,c.commission 
FROM customer a 
LEFT OUTER JOIN orders b 
ON a.customer_id=b.customer_id 
LEFT OUTER JOIN salesman c 
ON c.salesman_id=b.salesman_id;

======================================================================================
Right Outer Join:=
~~~~~~~~~~~~~~~
Retrives the matching  valves from all tables but unmatching data from right-hand-side only.
          
		                  ( unmatching rows at right~~~ Null at left[missing] )

Eg:= select * from emptab e right outer join addrtab d on e.eid= d.eid;
======================================================================================
Full Outer Join:=
~~~~~~~~~~~~~~~

Retrive matching and unmatching data from all tables.

Eg:=  select * from emptab e right outer join addrtab d on e.eid= d.eid;
  union
  select * from emptab e right outer join addrtab d on e.eid= d.eid;
======================================================================================

Natural Join:= (Inner join && Not supported in Mysql)
~~~~~~~~~~~~
---To avoid duplicate columns from join tables.
-- uSED When to have less Columns.


SELECT * 
FROM orders 
NATURAL JOIN customer  
NATURAL JOIN salesman; 


  Interview Question :=
~~~~~~~~~~~~~~~~~~~~~~~~
   
   emp1= 3 Records , emp2= 4 records /// SELECT * FROM emp1,emp2; == '12' (Fetching Records by Multiply Rows)
               
 
===========================================================================

 Self Join :=
~~~~~~~~~~~~~
 --- Comparing 2 Values within the Column (Or) Different-Column in same Table 
 
 
 

===========================================================================

Cross Join:= (Product of Rows----- M*N Rows)
~~~~~~~~~~~~

 --  explained as all rows present in the first table multiplied by all rows present in the second table. 
 -- It is similar to the Inner Join, where the join condition is not available with this clause.

----> (6 Rows in emptab) * (5 rows in addrtab) ======> 30 Rows.

To join more tables without join condition, without any common column.

Eg:=  select * from emptab cross join addrtab;

SELECT * 
FROM salesman a 
CROSS JOIN customer b 
WHERE a.city IS NOT NULL;
==============================================================================
 
 (1) where (2) OrderBy
  
 
 (3)GROUP BY clause :=
~~~~~~~~~~~~~~~~~~~~~~
  Clause is used to collect data from multiple columns and group the result by one or more column. It is generally used in a SELECT statement.You can also use some aggregate functions like COUNT, SUM, MIN, MAX, AVG etc. on the grouped column.

===============================================

 (4) HAVING Clause :=
~~~~~~~~~~~~~~~~~~~~
 It is used with GROUP BY clause. It always returns the rows where condition is TRUE.



----->"IN" condition is used to reduce the use of multiple 'OR' conditions in a SELECT, INSERT, UPDATE and DELETE statement.
   
      SELECT *  FROM officers  WHERE officer_name = 'Ajeet'  OR officer_name = 'Vimal'  OR officer_name = 'Deepika';  
	                                                 (as)
	  SELECT *  FROM officers  WHERE officer_name IN ('Ajeet', 'Vimal', 'Deepika');  

----->SELECT *  FROM officers  WHERE officer_id NOT BETWEEN 3 AND 5; 

----->  SELECT count(*) FROM assign a 
				INNER JOIN bdmreq br ON a.bdmReq_id=br.id INNER JOIN client c ON br.client_id = c.id 
				INNER JOIN addcontact ac ON br.addcontact_id = ac.id 
				INNER JOIN user ss ON ss.id = ac.lead_id  WHERE a.users_id = ? AND br.status = open

=====================================================================

-----> select ename from emptab where  qual='Mtech' or qual='Btech';
       ///"In" is used in place of "or" to simplify
       select ename from emptab where  qual in ('Mtech','Btech');

      select ename from emptab where  qual  not in ('Mtech','Btech');

----->select * from emptab where esal between 5000 and 7000;
     //"Between" used to test in range
	 select * from emptab where esal  not between 5000 and 7000;

----->select * from emptab limit 4;
      //returns in sequence order in specific range , 4th row to 8th row
	  select * from emptab limit 4,8;

----->select * from emptab order by esal desc  limit 1,1;   
    //2nd Highest salary of a employee in table

----->select * from emptab where ename like'r%';
      select * from emptab where ename like'%i';
	  select * from emptab where ename like'_a%';
	  select * from emptab where ename like'r___';
	  select * from emptab where ename not like'r%';
	  

----->select * from emptab order by esal desc,qual asc;
      select * from emptab order by feild(qual, 'Btech','Mtech','MBA');
	  ///To get records in order wise

----> To count rows in table ~~~~~~~~~~~~~    select count(*) from rama.emptab;
 
=============================================================================

	                  
					  //create table (emptab)~~~~~~~~~~~eid, ename,esal,qual
   


 Group By :=
~~~~~~~~~~~
Summaries identical rows into a Single /Distinct rows and returns a single row with summary for each group by using appropriate aggregate functions like SUM(), AVG(), COUNT(), MIN(), MAX()


----->Works on rows returned by select query.
  
 Eg:=  select esal,count(*) from rama.emptab group by esal;  //counts esal number repeated times
 
 ---- select qual,count(*) from emptab group by qual;
     ///to count total qual in tables liek Btech,Mtech how many times repeated....etc
 
 ---- select qual,sum(esal) from emptab group by qual having qual in('Btech','Mtech');
 
 
 --- If you use the GROUP BY clause in the SELECT statement without using aggregate functions, the GROUP BY clause behaves like the DISTINCT clause.You can achieve a similar result by using the DISTINCT clause:
	
	
==================================================================================================================

Having clause:=
~~~~~~~~~~~~~~
---> works as a filter on top of grouped rows returned by group by clause, cannot be replaced by where clause and viceversa.
       
Order~~~~~~~~~~~  ( where [filters individual rows]  ----- GroupBy     ----Having [filters GroupBy(group of) column]  ---OrderBy )


Eg:=   select ename, sum(esal) from rama.emptab group by ename having sum(esal)>2000 order by sum(esal) desc;

===========================================================================================================================

----> AND operator is a logical operator that combines two or more Boolean expressions and returns true only if both expressions evaluate to true. The AND operator returns false if one of the two expressions evaluate to false.

 ----
 
===========================================================================================================================

