
 Properties :=      [----- http://localhost:9411 ------] [ https://www.javatpoint.com/spring-boot-properties ]
~~~~~~~~~~~~~       [----- http://localhost:9000 ------] // [----- http://localhost:9595 ------]
 
 server.port=8965
 spring.datasource.url = jdbc:mysql://localhost:3306/test
 spring.datasource.username = root
 spring.datasource.password = root
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
 spring.jpa.show-sql = true
 spring.jpa.generate-ddl=true
 spring.jpa.hibernate.ddl-auto = create
  
  
 spring.mvc.view.prefix=/WEB-INF/views
 spring.mvc.view.suffix=.jsp
 
 spring.security.user.name= user
 spring.security.user.password= user
 security.basic.enabled=false
  
  logging.level.org.springframework=debug
 spring.main.banner-mode=OFF 
 spring.profiles.active=swagger-disabled-for-qa 
 spring.session.store-type=jdbc

 
 spring.session.store-type = dbc  # To store the Session-Objects to MySQL database.
 spring.datasource.initialize = false.
 

  

 H2-Database :=  http://localhost:8965/h2-console
~~~~~~~~~~~~~~~
 spring.datasource.url= jdbc:h2:mem:test 
 spring.datasource.driverClassName=org.h2.Driver  
 spring.datasource.username=sa  
 spring.datasource.password=  
 spring.jpa.database-platform=org.hibernate.dialect.H2Dialect  
 spring.jpa.hibernate.ddl-auto=create
 spring.h2.console.enabled=true 
 
 
 MongoDB :=
~~~~~~~~~~
spring.data.mongodb.uri=mongodb://localhost:27017/test
#spring.data.mongodb.host=127.0.0.1
#spring.data.mongodb.port=27017
#spring.data.mongodb.database=nit
#spring.data.mongodb.username=RAG
#spring.data.mongodb.password=NIT
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.uri=mongodb://username:password@host:port/database

spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=Flipkart


 Postgresql :=  (postgresql //// root)
~~~~~~~~~~~~~~
server.port = 8999
spring.datasource.url=jdbc:postgresql://localhost:5432/demo
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL121Dialect
spring.jpa.hibernate.ddl-auto=update

server.port=8999
spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/demo
spring.datasource.username=root
spring.datasource.password= root
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql = true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto = update

 MangoDB :=
~~~~~~~~~~
 spring.data.mongodb.host=localhost 
 spring.data.mongodb.port=27017   
 spring.data.mongodb.database=sathya
 
 spring.data.mongodb.username=sa 
 spring.data.mongodb.password=sa
 
======================================================================================================================================

 Gradle file (Kotlin) :=   [ https://start.spring.io/ ]   ////// Configure MySQL  //// Choose stable SpringBoot_Version && see <Package>
~~~~~~~~~~~~~~~~~~~~~~~~

 import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id("org.springframework.boot") version "2.5.2"
	id("io.spring.dependency-management") version "1.0.11.RELEASE"
	kotlin("jvm") version "1.5.20"
	kotlin("plugin.spring") version "1.5.20"
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

configurations {
	compileOnly {
		extendsFrom(configurations.annotationProcessor.get())
	}
}


repositories {
	mavenCentral()
	maven { url = uri("https://repo.spring.io/milestone") }
	maven { url = uri("https://repo.spring.io/snapshot") }
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation ("com.google.code.gson:gson:2.8.6")
	implementation ("org.apache.httpcomponents:httpclient:4.5.13")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("com.opencsv:opencsv:5.2")
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	runtimeOnly ("org.postgresql:postgresql")
	//runtimeOnly  ("mysql:mysql-connector-java:8.0.18")
	 implementation( "org.jetbrains.kotlin:kotlin-noarg")
}

tasks.withType<KotlinCompile> {
	kotlinOptions {
		freeCompilerArgs = listOf("-Xjsr305=strict")
		jvmTarget = "1.8"
	}
}

tasks.withType<Test> {
	useJUnitPlatform()
}


=================================================================================================================================

 MicroServices :=
~~~~~~~~~~~~~~~
 eureka.client.register-with-eureka=false
 eureka.client.fetch-registry=false
 spring.application.name=Movie-Catalog
 
 management.endpoint.health.disabled=true  #Acutator-Health

===============================================================================================
 Logging :=
~~~~~~~~~
 server.ssl.enabled=false
 logging.level.org.springframework.web=DEBUG
 logging.level.org.hibernate=ERROR
 
 #show sql statement
 logging.level.org.hibernate.SQL=debug

 #show sql values
 logging.level.org.hibernate.type.descriptor.sql=trace
 
 spring.mysql.console.enabled=true
 image.upload.dir=E:\ZZZ-RoughWork
 
 
 H2-Embedded :=
~~~~~~~~~~~~~~
 spring.h2.console.enabled=true
 spring.datasource.platform=h2
 spring.datasource.driverClassName=org.h2.Driver
 spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
 spring.datasource.url=jdbc:h2:mem:listofcustomers
 
=================================================================================

 Yml-Configuration :=
~~~~~~~~~~~~~~~~~~~~~
 spring:
   datasource:
     username: root
     password: root
     url: jdbc:mysql://localhost:3306/test
     driver-class-name: com.mysql.cj.jdbc.Driver
 
 jpa:
    hibernate.ddl-auto: create
    generate-ddl: true
    show-sql: true
    properties.hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
	
=================================================================================

 Mail-Configuration :=
~~~~~~~~~~~~~~~~~~~~~
  spring.mail.host=smtp.gmail.com
 spring.mail.port=587
 spring.mail.username=challanaveen521@gmail.com
 spring.mail.password=8985352910
 spring.mail.properties.mail.smtp.starttls.enable=true
 spring.mail.properties.mail.smtp.starttls.required=true
 spring.mail.properties.mail.smtp.auth=true
 spring.mail.properties.mail.smtp.connectiontimeout=5000
 spring.mail.properties.mail.smtp.timeout=5000
 spring.mail.properties.mail.smtp.writetimeout=5000
 
=======================================================================================

Q) What is the use of @PropertySource and @Value, @ConfigurationProperties?
A) @PropertySource : is used to load properties file into Spring container.
   @Value/@ConfigurationProperties is used to read data from Spring container
   to our code.

Q) How can we load a properties file from outside of classpath(src/main/resource) folder?
A) use file: inside @PropertySource annotation.

If file is created inside F:/ drive with folder name 'dataa' and file name: abc.properties
@PropertySource("file:F:/dataa/abc.properties")

If file is created inside Project folder (./ = current project folder) and file name mno.properties
@PropertySource("file:./mno.properties")


Q) If same key is provided multiple times with different value in properties file
   then which combination is considered?
A) duplicate keys are not-recomanded in Spring boot. If we write then last combination
   is loaded.

Q) Are keys case-sensitive in properties file?
A) YES. Keys are case-sensitive.
ex: below keys are different.
   code=A
   CODE=A
   
Q) If we define same key in both application.properties and application.yml
   with different value? then which one is taken?
A) Priority is given to properties file only.
   
=================================================================================================================








