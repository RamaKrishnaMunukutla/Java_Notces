 
  
   ....ConfigurationProperties33.......SpringBootInternalWork .....AdvantagesOfSpringBoot........MultipleInstances990
  
  ....Profiles333............SpringBootServletInitializer330....Profiles444.....LOMBOK770.......FileUpload......Environment440
   
  ....SpringBootJDBC440.........SpringbootMVCHibernate660.......Runner740.......PropertiesGet....Actuator550....Scheduler990
  
  ....YAML660...................HATEOAS780.....Thymeleaf890.....Multipart444....NamedQueries660....
   
  ....RestTemplate660...........Swagger220.....Chache440........ErrorHandling490.....SpringTransactional....BootRegEx
	
  ....SpringBatch660............RedisDB........PCF660...........SpringBatch880.......Cache330.......BootMongoDB 
   
  ....SpringBootFaceBook995.....Conditional880......SpringBootCache880........WhiteLabelError


===========================================================================================================

 
 SpringBootInternalWork :=  http://localhost:8080
~~~~~~~~~~~~~~~~~~~~~~~~
 
 [ https://www.youtube.com/watch?v=oSVwNqwkw-M&list=PLq3uEqRnr_2F0NK6_mpFcTxQh_s1U-s5r&index=1&ab_channel=GreenLearner ]

        (Inside)
 Starter ---->  META-INF / spring.factories  ----> Have Logic of What should be Enable / Disable at RunTime. 
  
                                                Based on @Conditional [4.0], (On Class, Bean, Property, Resource, Web, SpEL)
  
                                     It Enables / Disables few of components to build application.   
 
 
 --- Checks && Adds all Required-Jars to BuildPath.
 
 --- Run-As App :: Result in KickOff(Creates)---ApplicationContext Line && Checks for Type-Of-App (Servlet/ Recative/ Default)
                       Searches for STEREOTYPE annotation && add to JVM IOC Container. 
					   
					Configures the DispacherServlet && DefaultHandlerMapper 
					
					Creates Instance of TomcatEmbeddedServletContainer && Add the Context
					   
 
 --- @SpringBootApplication (STERIO-TYPE && 3-ANOO)
 
 --- Generates WAR-File 
 --- Creates Tomcat-Embedded-Servlet-Container && Context added to it.  
 
=========================

  Web ///// DevTools //// JPA //// MySql //// Lombok /// 

=====================================================================================================================

  AdvantagesOfSpringBoot :=  /// Extension off Spring 
~~~~~~~~~~~~~~~~~~~~~~~~~~
--- DevTools to autorestart server on code/config updates
--- Embedded Tomcat/Jetty/Undertow support
--- Doesn't require XML Configuration (*******)  ///  Eay to Launch && Manage 

--- Plenty of SpringBoot Starter to quickly get up and running
--- Easier dependency management using platform-bom

--- No need of creating boilerplate configuration
--- Easier customization of application properties
--- Easy management of profile specific properties

 -- Provide production-ready features such as metrics, health checks and externalized configuration
 -- Adds all related Jars with the StartUps (******************)
 
 
      Banner-OFF ----> app.setBannerMode(Banner.Mode.OFF);
	                   app.run(args);
					   
					          srping.main.banner-mode : OFF  
 
 
 @EnableAutoConfiguration := (***********)
~~~~~~~~~~~~~~~~~~~~~~~~~~~
-> As part of Auto Configuration SpringBoot will decide which components are required to run our application and it is going to load them. 	


     @Configuration      ---------> Makes it a Spring-managed bean. 
                                   In the @ConfigurationProperties, we set the prefix for our properties.

 @ConfigurationProperties --------> Allows to map the entire Properties and Yaml files into an object easily

      @PropertySource     --------> Set the path to the custom properties file.
                                    The @Validated annotation validates the properties.
 
 
  @SpringBootAplication :=
~~~~~~~~~~~~~~~~~~~~~~~~
  @Configuration ----> It will behave act as bean.
  @EnableAutoConfiguartion ----> It will enable bean based on some condition that we have discussed above.
  @ComponentScan ----> It is mainly used to scan the classes and packages to create the bean.
  
 
---->SpringBoot is a Spring module which provides RAD (Rapid Application Development) feature to Spring framework.
It is used to create stand alone spring based application that you can just run because it needs very little spring configuration. 
 
----> SpringBoot avoid all the boilerplate code and configurations that we had to do previously. Spring boot thus helps us use the existing Spring functionalities more robustly and with minimum efforts.


----> Spring Boot aims to simplify Java development with the Spring framework. (********)


---->SpringBoot provides opinionated 'starter' POMs to simplify your Maven configuration.
It automatically configure Spring whenever possible.

---->Spring Boot Features
1. Create stand-alone Spring applications
2. Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)
3. Provide opinionated 'starter' dependencies to simplify your build configuration
4. Automatically configure Spring and 3rd party libraries whenever possible
5. Absolutely no code generation and no requirement for XML configuration

 Starter-Web ----> WEb-MVC, Tomcat. 


---->What are the Advantages of using Spring Boot?
1.It is very easy to develop Spring Based applications with Java.
2.It reduces lots of development time and increases productivity.
3.It avoids writing lots of boilerplate Code, Annotations and XML Configuration.
4.It is very easy to integrate Spring Boot Application with its Spring Ecosystem like
Spring JDBC, Spring ORM, Spring Data, Spring Security etc

---->How to create Spring Boot application using Maven?
There are multiple approaches to create Spring Boot project. We can use any of the following approach to create application.
 
 ---Spring Maven Project (Configuration)
 ---Spring Boot CLI
 ---Spring Initializr
 ---Spring Starter Project Wizard


---->How to create Spring Boot project using Spring Initializer?
It is a web tool which is provided by Spring on official site. You can create Spring Boot project by providing project details.


----> SpringBoot uses of HttpSession to achieve Session management.

----> Repetetive-code(DB-Connection) is known as boilerplate code.  (*********)


 Start333 := [----- http://localhost:8965 ------]
~~~~~~~~~~
@SpringBootApplication
@ComponentScan("com.example.demo.*")
@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })
@EnableJpaRepositories("com.example.demo.jpa") 
@EnableAutoConfiguration(exclude=FlywayAutoConfiguration.class)
 
 
 
   @ComponentScan({                  // implements CommandLineRunner(I)
             "com.example.demo.*" , 
			  "com.naresh.it.*" ,
			  "com.ashok.it.*"
			 })
 
 
 @Order(20) := Used to define our own Order of Exception using Runners. 
~~~~~~~~~~~~~

      @Controller ------> Maps Model and Find the View. 
 
    @RestController ----> Sends Object as HTTP Response in XML / JSON Format.

===================================================================================================================
	
 **RunMultipleInstances :=  [ https://github.com/PlayProCode/PlayJava/tree/master/my-app ]
~~~~~~~~~~~~~~~~~~~~~~~~~
  
  Run Configuration ---> New  ---> Give Project_Name && Main Method Name [Search] 
 
                Environment -----> Give "server.port" && Port_Number ----> Apply && Close

 
  BootWithEHcache :=   [ https://github.com/SimpleProgramming?tab=repositories ]
~~~~~~~~~~~~~~~~~~~  
   Cache ---> Renders Page Faster //// Cookie ----> Stores User Details 
   
       @EnableCaching /// @Cacheable
	   
=================================================================================================================

  BootMongoDB :=
~~~~~~~~~~~~~~~
   CRUD ---> https://github.com/Java-Techie-jt/spring-mongodb
             https://github.com/Java-Techie-jt/spring-mongo-embedded

	   
 Eg :=
~~~~~
@Document(collection = "Book")
public class Book {
	@Id
	private int id;
	private String bookName;
	private String authorName;
}
	

 JSON :=
~~~~~~~

{
   "id" : 101,
   "name" : "rama",
   "gender":"male",
   "products":[{
           "name":"Santoor",
           "quantity": 60,
           "price":44
       },
         {
           "name":"Santoor",
           "quantity": 60,
           "price":44
       }
],
  "address": {
       "city" : "HYD",
       "state": "TEL",
       "pincode":"999"
   }
} 
===========================================================================================================

   Image Render in Postman ----> https://github.com/greenlearner01/File-Upload-Download-With-SpringBoot
   
   File-Upload ----> https://github.com/greenlearner01/File-Upload-Download-With-SpringBoot  // Displays Images on Browser
                                 
   Groovy ---> https://www.youtube.com/watch?v=6N2NmHif08E&list=PLq3uEqRnr_2FRt0CVn3GqKDsBqlN0z9XZ&ab_channel=GreenLearner
 
===========================================================================================================

 SecureBoot -- SSL :=   [ https://github.com/greenlearner01/ssl ]
~~~~~~~~~~~~~~~~~~      [ https://github.com/Java-Techie-jt/spring-https ]

 -- It is done by SSL (secure sockets layer. )
 -- It is Protocol for web browsers and servers that allows for the authentication, encryption and decryption of data sent over the Internet. 

 -- Establishes Secure Connection between Web-Server and Browser BY "ENCRYPTING" Data. 
 -- TLS  More Secure that SSL .
 
 -- Protects attacks from (1) SQL-Injection, (2) Cross-Site Scripting, (3) CSRF 
 -- Need to have Ddedicated IP-Address

===========================================================================================================

 @ConfigurationProperties33 (Prefix="config") :=     ImportAutoConfiguration40....PropertySource22
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- lt Letting developer maps the entire .properties and yml file into an object easily.
 --- for externalized configuration.   //// @Value to inject the .properties value one by one, this is good for small and simple structure
 --- It supports both .properties and .yml file.
		
    https://github.com/greenlearner01/Microservices/tree/master/profilesDemo/src/main/java/com/gl/profilesDemo		
	
 Eg :=
~~~~~
  resources/application.properties :=
~~~~~~~~~~~~~~~~~~~~~~~~~
 spring.main.banner-mode=off
 app.colour=steelblue
 app.lang=en
 app.theme=dark
 recipients[0]=user1@example.com
 recipients[1]=user2@example.com
 recipients[2]=user3@example.com
 recipients[3]=user4@example.com
 #Map Properties
 mail.additionalHeaders.redelivery=true
 mail.additionalHeaders.secure=true


@Configuration
@ConfigurationProperties(prefix = "app")
public class AppProperties {

    private String colour;
    private String lang;
    private String theme;
	private List<String> recipients;
    private Map<String, String> additionalHeaders;



@Component
@PropertySource("classpath:global.properties")
@ConfigurationProperties
public class GlobalProperties {

    private int threadPool;
    private String email;

    //getters and setters

 }

===================================================	
 	
	 @PropertySource   --------------> It  set the path to the custom properties file

 
 @RequestHeader   
~~~~~~~~~~~~~~~
  --- bind method parameters to request headers.
  
  
 @ServletComponentScan := 
~~~~~~~~~~~~~~~~~~~~~~~~~
  ---- Automatically register the following Servlet components for embedded web servers.
 
   (1) @WebServlet  .
   (2) @WebFilter.
   (3) @WebListener annotations
   
  --- Spring Boot use embedded container for the deployment (until we deploy it on external container). 
  --- The embedded container does not support the @WebServlet, @WebFilter and @WebListener annotations. 
  --- To handle it and support these annotations. Spring Boot introduced the new @ServletComponentScan annotation.
  
=================================================== 
  
  @ImportAutoConfiguration :=    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---- when you don't want to enable the default autoconfiguration with @EnableAutoConfiguration. 
 ---- @EnableAutoConfiguration attemps to configure beans that are located on your classpath eg tomcat-embedded.jar.  
 ----Whereas @ImportAutoConfiguration only runs the configuration classes that you provided in the annotation.
 
 
  Eg :=
-------
@ComponentScan("path.to.your.controllers")
@ImportAutoConfiguration({WebMvcAutoConfiguration.class
    , DispatcherServletAutoConfiguration.class
    , EmbeddedServletContainerAutoConfiguration.class
    , ServerPropertiesAutoConfiguration.class
    , HttpMessageConvertersAutoConfiguration.class})
public class App {
  public static void main(String[] args) {
    SpringApplication.run(App.class, args);
  }
}

===========================================================================================================

        RequestBody --->https://www.concretepage.com/spring-5/spring-restcontroller                      					 


		 .....MySql....DevTools....JPA....Web.....
	  
	  
   src/static/css ----> CSS Files. ///// http://localhost:8965/
	   
	   
	   src/template ------> HTML Files
	   
	   
 Profiles, XML-Files -----> @ Application.properties.,  
                       Import using @ImportResource("classpath: Beans.xml") in Main-Class
			
			


=========================================================================================================

  @PropertySource22 :=
~~~~~~~~~~~~~~~~~~~~~
 --- To externalize your configuration to a properties file. 
 --- Spring f/w  loads properties file into Spring Container from the application.properties file into the Environment (Key-Value)   
               and to inject them into class attributes.  (*************)
			   
			     Default -----> @PropertySource("classpath:application.properties")  ////  application.properties has more priority 
				  
			   
 --- In this tutorial, we will show you how to use @PropertySource to read a properties file and display the values with @Value and Environment.
 ---  use Environment to get the property values.
 ---  YAML Cannot loaded using @PropertySource  annotation (**********)
 
               
			                      @PropertySource        ------> Loads Outside file into Container 
			           @Value / @ConfigurationProperties ------> Reads Data from  Spring-Conatiner to Class 
					   
					   
					   @PropertySource  -----> Spring_Coantiner ---->  @Value / @ConfigurationProperties  (*****************)
					   
					   
(Q) If Same variable is present in two Dot-Properties file, which one is loaded ?? 
(A) Last Dot-Properties file will actually Override the Value 


(Q) Difference between @Value && @ConfigurationProperties  ??
(A) @Value --- will give Exception if not matching was found 
    @ConfigProp --- will give null if not matching was found




  Eg :=
 ~~~~~
 
 config.properties
 
    mongodb.url=1.2.3.4
    mongodb.db=hello

@Configuration
@ComponentScan(basePackages = { "com.mkyong.*" })
@PropertySource("classpath:abcd.properties")  // (*******)  
public class AppConfigMongoDB {

    //1.2.3.4
    @Value("${mongodb.url}")
    private String mongodbUrl;

    //hello
    @Value("${mongodb.db}")
    private String defaultDb;
	
    @Autowired
    private Environment env;

    @Bean
    public MongoTemplate mongoTemplate() throws Exception {

        String mongodbUrl = env.getProperty("mongodb.url");
        String defaultDb = env.getProperty("mongodb.db");
		
     }
   }
   
 Eg22 :=
~~~~~~~
    @Configuration
    @PropertySources({
        @PropertySource("classpath:config.properties"),
        @PropertySource("classpath:db.properties")
    })
	@PropertySource(value = "classpath:root.properties", ignoreResourceNotFound=true)  // don’t throw exception if file is not found
    public class AppConfig {
        //...
    }

======================================================================================================================	   

  ...StereoTypeAnnotation, @autowired(@Qualifier).....Scopes .....@Component.....@Configuration,@Bean,@ComponentScan.......

    .........Spring-MVC, Model, ModelAndView, @ModelAttribute, @ExceptionalHandler, @ControllerAdvice.............
	
	        ........@Profiles, @Transactional, @Import, @ImportResource..............
 
=================================================================================================================================================

 MultipleInstances990 :=
~~~~~~~~~~~~~~~~~~~~~~~
-> We can pass port number to Spring Boot application as VM argument.


Right Click On Project -> Run As -> Run Configuration -> Click on Arguments Tab -> Write below property in VM Arguments -> Click on Apply -> Click Run


	-Dserver.port=9091


First Run with -Dserver.port=5050 ===> http://localhost:5050/welcome

Second Run with -Dserver.port=6060 ===> http://localhost:6060/welcome

Third Run with -Dserver.port=7070 ==> http://localhost:7070/welcome

================================================================================================

 Profiles333 :=  
~~~~~~~~~~~~~~~~
 [ https://github.com/Java-Techie-jt/spring-profile ]
 [ https://github.com/TechPrimers/spring-boot-profiles-example ]
 
 [ https://github.com/kishanjavatrainer/SpringBootProfilesApp2 ]
 [ https://www.concretepage.com/spring-boot/spring-boot-profiles-example ]
 [ https://github.com/sumitMultani/spring-boot-profiles-example ]  (***)
 
 
---->Why Profiles Are Necessary?
Profiles provide ability for application developers to specify different application configuration for different environments

 ---we have different application.properties for differnt App development Life-Cycle.
 
 ---used to change the configuration-Properties(App.Properties) based on environment( dev, testing, production, deployment )
 
                        Spring-<Name>.Extension (yaml/Properties/XML)
 
 ---provide default application.properties specifying which profile Spring-Boot has to consider while starting Application.
 
                     "-- spring.profile.active=dev --" ...... ( prod (or) test etc... )
 
 --- we can also define it with annotaion "--@Profile("dev")--"

 
          @Profile("default") -----> Only One Profile  //// If no Annotation is not metioned (applicable to all) 
		                             Executes for every profile (*********)


======================================================================================================

 LOMBOK770 :=  [ SBMS-7AM-- 12/9/2020 ] 
~~~~~~~~~~~~
  --- Annotate These Annotations Above Class (******)
 
 --- Goto <Jar-maven-Path> ---> Double-Click(Install) // 
                   Open-CMD in <Same-path>, Command :: java -jar lombok-1.18.12.jar  ----> Restart-STS //
   
   https://howtodoinjava.com/automation/lombok-eclipse-installation-examples/
   
            
 PATH -----> C:\Users\DELL\.m2\repository\org\projectlombok\lombok\1.18.10
             C:\Users\rm19403\.m2\repository\org\projectlombok\lombok
				

   ......@NotNull[applied On parameter(method) or constructor].......@getter.......@Setter........@AllArgsConstructor
   
  .......@NoArgsConstructor..........@ToString.......................@EqualsAndHashCode
  
  .....@RequiredArgsConstructor(+ @NonNull //  Contructor with NotNull)..................@ConfigurationProperties
   
  
10 Expand Package Explorer to view added/genrated code in class

=================================================================

 Lombok Annotations:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. @Getter and @Setter : 
   This annotation says to lombok generate get and set methods for variables

2. @ToString : Lombok generates toString() method code using variables.

3. @EqualsAndHashCode: 
   Lombok generates equals() and hashCode() method code using variables.

4. @NoArgsConstructor : To generate one default/zero param constrcutor

5. @AllArgsConstructor : To generate all variables as Parameters constrcutor

6. @RequiredArgsConstructor + @NonNull :
    *) To generated selected variables as params constrcutor.
    *) Variable selection is done using @NonNull
	*) It is applied without any variable having @NonNullthen Lombok generated Default constrcutor/zero param

7. @Data = @Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor


 (Q) Types of Constructors :: 
    --- Default 
	--- Params 
	--- Selected Variable as Params 
	
	   Need Extra Constructor ----> Need to go manually 

=================================================================  
 @Data :=
~~~~~~~~~
 --- It is a convenient shortcut annotation that bundles the features of @ToString, @EqualsAndHashCode, @Getter / @Setter, and @RequiredArgsConstructor together.  

 @Cleanup :=
~~~~~~~~~~~
 --- It to ensure a given resource is automatically cleaned up before the code execution path exits your current scope
 
 Class :=
~~~~~~~~~ 
@ConfigurationProperties (prefix="demo")
@EnableConfigurationProperties 
@Component
 Class Demo {
   
   private String Location;
 }  
 
 application.yml  
~~~~~~~~~~~~~~~~~
 demo:
    Location : location is Hyderabad.

=================================================================

 Builder := 
~~~~~~~~~~
 --- to create instances of our class.
 --- Lombok does all of the work for us. We can now build a Widget and test it:

@Getter
@Builder
public class Widget {
    private final String name;
    private final int id;
 }

 Widget testWidget = Widget.builder()
  .name("foo")
  .id(1)
  .build();
  
=============================================================

 FileUpload  :=
~~~~~~~~~~~~
 
    https://github.com/chargeahead/SpringBootFileUpload

===================================================================================================================================================

 SpringBootJDBC440 := [ https://github.com/kishanjavatrainer/SpringBootJdbc ]
~~~~~~~~~~~~~~~~~~~
---->Datasource bean gets initialized automatically if not mentioned explicitly.

--->If user does not want this then it can be done by setting the property "-spring.datasource.initialize-" to false.

--->If JdbcTemplate, NamedParameterJdbcTemplate not registered, then Spring Boot will register them automatically

--->Spring Boot will detect spring-jdbc on the classpath and mysql and will create a DataSource and a JdbcTemplate for us automatically.
	 
========================================================================================================
 
 SpringbootMVCHibernate660 :=   [ https://github.com/kishanjavatrainer/SpringBootHibernateProject ]
~~~~~~~~~~~~~~~~~~~~~~~~~~~  

https://www.codejava.net/frameworks/spring-boot/spring-boot-crud-example-with-spring-mvc-spring-data-jpa-thymeleaf-hibernate-mysql
   
  [https://github.com/RameshMF/springboot2-webapp-jsp 
   
----> https://www.concretepage.com/spring-boot/spring-boot-thymeleaf-maven-example

   
  /src/main/resources/templates/ ~~~~~> edit_product.html


============================================================================================================

 SpringDataJPA :=
~~~~~~~~~~~~~~~~~
 ---used to provide JPA based repositary that aims to simplify  implementations of Data-Access-Layer using JPA.

                    extends                       extends                                  extends
    Repository(I) <--------- CRUDRepository(I) <--------- PagingAndSortingRepository(I) <--------- JPARepository

===========================================================================================================
 
 @ConfigurationProperties :=
~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Used to pull-up Group-of-Configuration files at Once.&& make it avialble through out application.

===========================================================================================================
 
 CommandLineRunner560 (I) := [ https://www.youtube.com/watch?v=qhihLoCfFvY&list=PLzS3AYzXBoj8UcLsBN3UXd7Nf1T4ZyJa0&index=47 ]
~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---Used to execute Any task before Boot executes it.
 ---has Method "Run()" takes String[] as argument.
 
 
 ApplicationRunner  (I) :=
~~~~~~~~~~~~~~~~~~~~~~~
 ---Used to execute Any task before Boot executes it.
 ---has Method "Run()" takes ApplicationArguments as argument.


==================================================================================================== 
 
 PropertiesGet :=
~~~~~~~~~~~~~~~
----> We can inject Class-Properties into Applcation.properties usng  'ApplicationProperties'




==========================================================================================================================
 
 Scheduler990 :=  [ https://github.com/Java-Techie-jt/spring-boot-scheduler ]
~~~~~~~~~~~~~~      https://crontab.guru/

  ---- Execuetes a piece of Code for a Periodically    /////   @Scheduled(cron = "0 15 10 15 * ?")
  
  
 Methods := fixedDelay , fixedRate , initialDelay 
~~~~~~~~~~

  fixedDelay : An Exact time gap given between first method finish time to next method start time

  fixedRate : Max time gap given to start next method call, 
            including (previous) method execution time.

Q) What is the difference between fixedDelay and fixedRate?
A) fixedDelay provides exact time between two methods.
   fixedRate provides max time gap including method execution time.
   
--Ex--
package in.nareshit.raghu.service;
import java.util.Date;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ExportData {

	@Scheduled(fixedRate = 2000) // 2sec =2000 mill sec
	public void execute() {
		System.out.println("DONE " + new Date());
	}
}
	==============================================================================
		          Scheduling using cron expression 
	==============================================================================
=> cron is a expression used to indicate date and time in Unix based Operating System
=> cron looks like:
           SEC    MIN   HRS    DAY   MONTH    WEEKDAY
           0-59  0-59   0-23   1-31   1-12    SUN-SAT

=> Symbols used in cron expression
     *   =  any / all
     -   =  range
     ,   =  possible values
     /   =  period of time
     ?   =  any or all applied only for DAY or WEEK DAY when month is provided

=> By default it indicates PointOfTime, we can also use as period of time.

----Example--------
1.  0  0  9  *  *  * 

=> Execute given task in a loop every day 9:00:00 AM 
 ex:   22nd Sep - 9AM  --- method is called
  Next 23rd Sep - 9AM  --- method is called
  Next 24th Sep - 9AM  --- method is called

2.  0  0  18  *  *  * 

=> Execute given task in a loop every day 6PM

3.  0  0  6,18  *  *  *

=> Execute given task in a loop every day 2 times   6AM and 6PM

4.  0  0  10,14  *  *  *

=> Execute given task in a loop every day 2 times   10AM and 2PM


5.  0  30   8   *   *   *

=> Execute given task in a loop every day 1 time : 8:30:00 AM

6.  0   10   *   *   *   *

=> Every hrs 10th min task executed. (It is not 10 mins gap)

 Task started at :  9:10:00  AM
     Next        : 10:10:00  AM   (next hr 10th min)
     Next        : 11:10:00  AM

7.  10  *  *  *  *  *

@Component
public class ExportData {

	@Scheduled(cron = "10 * * * * *") 
	public void execute() {
		System.out.println("DONE " + new Date());
	}
}


=> Every Minute 10th sec (it is not 10 sec gap)

 Task Started at :  9:00:10  AM
     Next        :  9:01:10  AM (next min 10th sec)
     Next        :  9:02:10  AM (next min 10th sec)

8.  * * * * * *
=> Every sec execut task.


@Component
public class ExportData {

	@Scheduled(cron = "* * * * * *") 
	public void execute() {
		System.out.println("DONE " + new Date());
	}
}


9.  0  *  9  *  *  *
  (Invaild Expression)
=> If we provide hrs then must provide mins and sec too
=> If we provide mins then must provide sec too.


10.  0  0  9  1  *  *

=> Every month 1st - 9:00:00 AM 

11. 0  0  8-11  *   *  *
    0  0  8,9,10,11  *   *  *

=> Every day 4 times executed
    8:00:00 AM
    9:00:00 AM
    10:00:00 AM
    11:00:00 AM
   
12.  0  0  9  1  1  SUN

=> Execute on 1st JAN 9:00:00 AM if given day is SUNDAY only.
 Next execution is on: 1st JAN 9:00:00 AM  2023 (SUN)

13.  0  0  9  *  8  *

(INVAILD EXPRESSION)
=> WHEN MONTH IS PROVIDED, WE MUST PROVIDE DAY AND WEEK DAY BOTH
=> ELSE DO YOU WANT TO INDICATE EVERY DAY AND EVERY WEEK DAY THEN USE ?

Vaild format is :  0  0  9  ?  8  ?   

14. 59   59   23   31   12   ?

=> Every Year, Dec-31st - 11:59:59 PM 

------------------------- Period of time (/ = gap)-------------------------
          use Symbol / at any position that indicates period (not at WEEK DAY)

15.  10  *  *  *  *  *
    => Every min 10th sec

     */10  *  *  *  *  *

   => Every 10 sec gap

--Example--
@Component
public class ExportData {
	@Scheduled(cron = "*/10 * * * * *") 
	public void execute() {
		System.out.println("DONE " + new Date());
	}
}


16.   0   0/10   9   *   *   *

=> Start 9:00:00 AM Every day
=> gap time added +10 mins
   Next: 9:10:00 AM
   Next: 9:20:00 AM
   Next: 9:30:00 AM
   Next: 9:40:00 AM
   Next: 9:50:00 AM

Q) What if method takes more then given time?
A) Consider at given point next method execution starts, it will never check about last
   method (finished or not?). A new thread is created.

17.  0   0  9/3  1  *  *

=> Start 1st of every month 9:00:00AM
   Add  Gap of +3 hrs
   Next:  12 PM, Next: 3PM, next: 6PM, Next: 9PM

   If we take next 12 AM comes under 2nd Date. So, not considered.


*)https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html


"0 0 * * * *" = the top of every hour of every day.
"*/10 * * * * *" = every ten seconds.
"0 0 8-10 * * *" = 8, 9 and 10 o'clock of every day.
"0 0 6,19 * * *" = 6:00 AM and 7:00 PM every day.
"0 0/30 8-10 * * *" = 8:00, 8:30, 9:00, 9:30, 10:00 and 10:30 every day.
"0 0 9-17 * * MON-FRI" = on the hour nine-to-five weekdays
"0 0 0 25 12 ?" = every Christmas Day at midnight			

==========================================================================================================================

 YAML660 (Yet Another Markup Language) :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --YAML is a superset of JSON.
 --Spring Boot YAML as an alternative to the application.properties file to define your project properties.
 --The SpringApplication class automatically supports YAML as an alternative to properties whenever you have the SnakeYAML library on your classpath.

---->Follows indentation for more Readability. (= ---> : )

Let’s take the following example of the application.properties file.

environments.dev.url=https://dev.javadevjournal.com
environments.dev.name=Developer Setup
Copy

It can represent the YAML files as follows ::
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
environments:
   dev:
       url: https://dev.javadevjournal.com
       name: Developer Setup
	   
==================================================================================================================

 To Avoid "White-label-Error" [ WhiteLabelError ] :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.


@RestController
public class MyController implements ErrorController{

	private static final String PATH="/error";
	@RequestMapping(value="/welcome",method=RequestMethod.GET)
	public String hello(){
		return "Hello World";
	}

	@RequestMapping(value=PATH,method=RequestMethod.GET)
	public String defaultErrorMessage(){
		return "Requested Resource is not found!!!";
	}
	@Override
	public String getErrorPath() {
		return PATH;
	}
}

============================================================================================================
 
 HATEOAS780 :=
~~~~~~~~~~~~
 ---It is known as Hypermedia As The Engine Of Application State. 
 
 ---It is used to present the REST API information to the client allowing better API understanding and documentation
 
 --- It library of APIs that you can use to create links that point to Spring MVC controllers, build up resource representations.
 

===========================================================================================================================

 Runner740 :=
~~~~~~~~~~~~~

        CommandLineRunner(I)  [1.0] //// ApplicationRunner(I) [1.3] [F-I]  
 

----> ApplicationRunner(I) and CommandLineRunner(I) interfaces lets you to execute the code after the Spring Boot application is started. 

---->You can use these interfaces to perform any actions immediately after the application has started.


                   ApplicationRunner(I) [1.3]  ----> public void run(AplicationArguments args) throws Exception
				   
				   CommandLineRunner(I) [1.0]  ----> public void run(String... args) throws Exception
				   
				   
 Types of Args := ( ApplicationRunner has Both)
~~~~~~~~~~~~~~

      (1)  Option Args [Inputs]        ---->  --key=value  /// 
	  
	  (2) Non-Option Args  [Commands]  ---->     data 
    


 Eg :=
~~~~

@Component
public class EmployeeInsertRunner implements CommandLineRunner {
	
	@Autowired
	private EmployeeRepository repo;
	
	@Override
	public void run(String... args) throws Exception {
		repo.save(new Employee(101, "A", 2.2, "DEV"));
		repo.save(new Employee(102, "B", 3.2, "DEV"));
		repo.save(new Employee(103, "C", 4.2, "QA"));
		repo.save(new Employee(104, "D", 5.2, "QA"));
	 }

  }
  
 @Order(77) := Exceutes Runnners in Order. 
~~~~~~~~~~

 Eg 22 :=
~~~~~~~~~
	@Bean
	public  CommandLineRunner employees(EmployeeRepository  employeeRepository) {

		return args -> {
			employeeRepository
					.deleteAll()
			.subscribe(null, null, () -> {

				Stream.of(new Employee(UUID.randomUUID().toString(),
						"Peter", 23000L),new Employee(UUID.randomUUID().toString(),
						"Sam", 13000L),new Employee(UUID.randomUUID().toString(),
						"Ryan", 20000L),new Employee(UUID.randomUUID().toString(),
						"Chris", 53000L)
						)
						.forEach(employee -> {
				employeeRepository
						.save(employee)
						.subscribe(System.out::println);

						});

			})
			;
		};

	}

==========================================================================================================

----> How to create Spring Boot project using boot CLI?
It is a tool which you can download from the official site of Spring Framework. Here, we are explaining steps.

---->The main goal of Spring Boot Framework is to reduce Unit Test and Integration Test time and to ease the development of Production ready web applications very easily compared to existing Spring Framework.

---->mvn clean install used to create an executable JAR file to run the Spring Boot application by using Maven




CORS(Cross-Origin-Resource-Sharing) :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---Provides security to application by adding Restriction to API who are Accessing it.


 
SpringBootDependencyManagement := (...aggregates common dependencies together and improve productivity....)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Spring Boot manages dependencies and configuration automatically. You don't need to specify version for any of that dependencies.
Spring Boot upgrades all dependencies automatically when you upgrade Spring Boot.

=========================================================================================================

   Actuator550 := (.....provide help while running spring boot appliaction)
 ~~~~~~~~~~~~~~~~
 
 [ https://www.youtube.com/watch?v=RZNV9hi7a8w&list=PLyHJZXNdCXsdXxY8wupiLenux2Yafn1lN&ab_channel=CodeDecode ]
 
 ---Spring Boot provides actuator(Tool) to monitor and manage our application health when you push it to production.
 ---It can be done through HTTP endpoints.  (***)
 --- Actuator module exposes set of REST endpoints that can be directly accessed as a HTTP URL to check the status. (***)
 
 --- 2 Endpoints are exposed without Security (1) /health  (2) /info
 --- To Expose all Endpoints
                   
				       management.endpoints.web.expose.include = *  ( http://localhost:89965/actuator ) 
					   
 --- To change base-Path of Actuator Endpoints ::
 
					 management.endpoints.web.base-path = /rama    /// (EndPoints are acessed using "rama")
					 management.server.port =9090
					  
					 management.endpoints.<APP-NAME> = always
					 
					 management.endpoints.health.enabled=false    /// Disbles Endpoint 
					 
					 management.endpoints.web.expose.include = health, info 
					 management.endpoints.web.expose.expose =  beans, metrics 
  
  
  Actuator : It provides 'Ready made services' [Production Ready Endpoints]
    that gives services at production specially, to check
    a) Are my Beans(Objects) created?
    b) All properties loaded?
    c) Cache enabled?
    d) Log files created? content?
    e) Is server started Properly?
    ..etc.

=> To check all MS actuators using one central application, we can
  use admin-server (admin -ui/ admin moniter).

 --- Actuator endpoints to monitor metrics of individual microservices. 
 --- when application is pushed to production, you can choose to manage and monitor your application using HTTP endpoints.
 --- Spring Actuator which allows provides all that information in  a running application.
 --- Provides information about which beans are created in Spring's Application Context and how Controllers are mapped.


-> In Spring Boot 2.x v '/actuator' is mandatory in  URL to access Actuator endpoints

-> When we add 'actuator' starter, by default it will expose 2 endpoints they are 'health' and 'info' (we can access them directley).

-> To expose all the endpoints we shuld write below property

management:
  endpoints:
    web:
      exposure:
        include: *
        exclude: beans


 Spring Boot Actuator Features ::=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There are three main features of Spring Boot Actuator:
Endpoints
Metrics
Audit


 I/O ----> It's a webApp that creates internal Project Structure for you

 AutoConfiguration ----> helps in loading default configuration

=====================================================================================================

SpringBootStarter :=
~~~~~~~~~~~~~~~~~~
---deal with dependency management.
---When you are adding more than one starters spring automatically detects the compatible version for integrating it.
Ex: if you add spring boot web and spring boot JPA starters, spring automatically detects the right version of spring, JPA and hibernate.

                        Eg := spring-boot-starter-data-jpa dependency 

 
 spring-boot-starter-parent :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---The spring-boot-starter-parent is a special starter that makes Maven or Gradle dependency-management easier by adding jars to your classpath.
 ---It adds a basic set of spring jars needed for any type of spring based applications.

=============================================================================================

 SpringBootServletInitializer330 (MKYONG) := // extended by MAIN class && Override "-configure()-" method.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---In Spring-Boot, to create a WAR for deployment and deploy to a Tomcat-servlet-container, It is used.
 ---Marked the embedded servlet container as provided.
 ---Update packaging to war.
 ---In Spring Boot, the new final executable JAR file with embedded server solution may not suitable in all production environments, especially the deployment team.
 
  POM.xml :=
~~~~~~~~~~~
  <packaging>war</packaging>........
	
	 <properties> 
      <!-- The main class to start by executing java -jar -->
      <start-class>com.mkyong.SpringBootWebApplication</start-class>
  </properties>
  
  	<!-- marked the embedded servlet container as provided -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-tomcat</artifactId>
		<scope>provided</scope>
	</dependency>
 
 
 Eg :=
~~~~~
 @SpringBootApplication
 public class StartWebApplication extends SpringBootServletInitializer {

    public static void main(String[] args) {
        SpringApplication.run(StartWebApplication.class, args);
    }

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
        return builder.sources(StartWebApplication.class);
    }
 }
 
========================================================================

---->The @EnableAutoConfiguration is used to enable auto-configuration
 ---@Configuration and @ComponentScan annotations to enable Java-based configuration and component scanning in your project.

 
---->Tomcat-Jasper will convert JSP file  to Servlet file  (....Add Dependency)

----> @ResponseBody will return SpecificData Only . Not return Webpages (Servlet,JSP, HTML)


----> HTTPServletRequest req
    
	  HttpSession ses= req.getSession();
	  
	 String name= req.getParameter("cname");  ....//fetches  name from Client-webpage.
	 
	 ses.setAttribute("cname", cname");  .....//Adding "cname" value to Session.
	 
	 In JSP ---> ${cname} ...../// Displaying in JSP
	 ~~~~~~~


----> ModelMap ----> map values from Client-webpages to Model
  

---->   <form method="pst" action ="details"/>
                                    ......// here "--details--" should same as @RequestMapping("/details")  
  

---->@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
                      ..........used to remove need the datasource, simply remove it from the auto-config process

----> URI --- uniquely Identifies the resource
     Body --- holds the state of requestingResource.
	 
----------------------------------------------------------------------------------------------
	 
---->Possible sources of external Configuration ::=
      
	  ApplicationProperties ------ (Default)
	   CommandLineProperties ------- converts commandline argument to properties.
	   ProfileSpecificProperties --- Profiles
	   
Expose Custom Application configuration :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
<packaging>
@ConfigurationProperties("Eg")
public class Simple{
private int eid;
private String ename;
}
</packaging>

    In AppProperties ---> eg.name="rama"
	                      eg.eid=101;

----------------------------------------------------------------------------------------------
			  
---->If you run BootProject as JavaApplication, it automatically launches up "--tomcat--" server. 


----> Spring-boot-starter (jdbc, JPA, web, security, test)

----> thymleaf is a java template used for web Apps to bring natural template. data stored in hierarchical-Format.

---->To deply Spring-Boot JAR (or) WAR files add plugin 

             <packaging>war/jar</packaging>
			 
			 <plugin>
			 <groupId>org.springframework.boot</groupId>
			 <artifactId>spring-boot-maven-plugin</artifactId>
			 </plugin>


Profiles ---> segregate the parts of AppConfigurationas and make it available in environment.  

=====================================================================================================

 ThymLeaf :=
~~~~~~~~~~~~
 ---To use in SpringBoot, use <spring-boot-starter-thymleaf> dependency.
 ---It is Server-side template engine that can process XML, HTML etc...
 ---It can access Class feilds && bind it with form-fields.
 ---It can use CSS-files && Perform Validations && displays i18n-Messages.

=====================================================================================================
 
----> What is @RestController annotation in Spring Boot?
The @RestController is a stereotype annotation. It adds @Controller and @ResponseBody annotations to the class. We need to import org.springframework.web.bind.annotation package in our file, in order to implement it.

---->Where do you need @EnableWebMVC? (answer)
The @EnableWebMvc annotation is required to enable Spring MVC when Java configuration is used to configure Spring MVC instead of XML. It is equivalent to <mvc: annotation-driven> in an XML configuration.


----> What is the View Resolver pattern? how it works in Spring MVC
View Resolver pattern is a J2EE pattern that allows a web application to dynamically choose its view technology, e.g. HTML, JSP, Tapestry, JSF, XSLT, or any other view technology.


---->When do you need @ResponseBody annotation in Spring MVC? (answer)
The @ResponseBody annotation can be put on a method to indicate that the return type should be written directly to the HTTP response body
 
 @RequestMapping(path = "/hello", method = RequestMethod.PUT)
 @ResponseBody
 public String helloWorld() {
   return "Hello World";
 }

---->Spring Boot uses Commons Logging for all internal logging and you can change log levels by adding following lines in the application.properties file:

 logging.level.org.springframework=DEBUG
 logging.level.com.demo=INFO


---->How to Disable a Specific Auto-Configuration?
   @SpringBootApplication(exclude = DataSourceAutoConfiguration.class)
   public class MyConfiguration { }


----> spring-boot-maven-plugin, to package a web application as an executable JAR. To include this plugin, just add a plugin element to pom.xml:
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
</plugin>


---->In case we want to build a WAR file, change the packaging element to war:
                        <packaging>war</packaging>


---->Applications using DevTools restart whenever a file on the classpath changes. This is a very helpful feature in development, as it gives quick feedback for modifications.


---->The most commonly used and important spring boot annotations are as below:

---->@EnableAutoConfiguration – It enable auto-configuration mechanism.

---->@ComponentScan – enable component scanning in application classpath.

----> @SpringBootApplication annotation is used to mark a configuration class that declares one or more @Bean methods and also triggers auto-configuration and component scanning. It's same as declaring a class with @Configuration, @EnableAutoConfiguration and @ComponentScan annotations.

---->@ImportAutoConfiguration ~~ imports and apply only the specified auto-configuration classes. We should use this when we don’t want to enable the default auto-configuration.


---->@AutoConfigureBefore, @AutoConfigureAfter, @AutoConfigureOrder – shall be used if the configuration needs to be applied in a specific order (before of after).

---->@Conditional – annotations such as @ConditionalOnBean, @ConditionalOnWebApplication or @ConditionalOnClass allow to register a bean only when the condition meets.


---->To create an executable jar, we shall add spring-boot-maven-plugin in pom.xml. By default, this plugin package the application as .jar file only.
<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>


----> To create war file, first logical step is to declare the packaging type ‘war’ in pom.xml file.Second thing, set scope of embedded server dependency to ‘provided’ because server dependencies will be provided by application server where war file will be deployed.

pom.xml
<packaging>war</packaging>
 
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-tomcat</artifactId>
    <scope>provided</scope>
</dependency>


---->10. How to enable debug logging?
To enable debug logging,

we can start the application with the --debug switch.
we can set the logging.level.root=debug property in application.properties file.
We can set the logging level of root logger in supplied logging configuration file.


---->To perform unit testing in Spring-Boot, we can take help of specialized annotations such as :
   ---@JdbcTest – can be used for a typical jdbc test when a test focuses only on jdbc-based components.
   ---@JsonTest – It is used when a test focuses only on JSON serialization.
   ---@RestClientTest – is used to test REST clients.
   ---@WebMvcTest – used for Spring MVC tests with configuration relevant to only MVC tests.



---->What are the requirements of Spring boot 2 System?
Spring Boot 2.1.3.RELEASE requires

 Java 8 + (compatible up to Java 11) && Spring 5

 For build support ---> Maven 3.3+ && Gradle 4.4+

 Container Support ---> Tomcat 9 && Jetty 9.4



---->How do you change JDK version in spring boot?
<properties>
    <java.version>1.8</java.version>
</properties>


---->What are Profiles in spring boot?
Spring Profiles provide a way to segregate parts of your application configuration and make it only available in certain environments. Any @Component or @Configuration can be marked with @Profile to limit when it is loaded.


---->How do you run and stop spring boot executable jar?
Open cmd or shell window and use java -jar as shown below
$ java -jar my project-0.0.1-SNAPSHOT.jar
To stop use ctrl+C



---->How to disable specific auto-configuration in spring boot?
You can use exclude property as shown below to disable specific auto-configuration.
                
				 @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
 

============================================================================================================


  
How to execute Spring Batch jobs on startup?
Spring Batch auto-configuration is enabled by adding @EnableBatchProcessing (from Spring Batch) somewhere in your context. By default, it executes all Jobs in the application context on startup.


32. Does spring boot need Logging? What is the default one?
Spring Boot has no mandatory logging dependency, except for the Commons Logging API.


33. How do you configure Configure Logback for logging?
If you put a logback.xml in the root of your classpath it will be picked up from there.


34. How do you Configure Log4j for logging?
Spring Boot supports Log4j 2 for logging configuration if it is on the classpath. If you are using the starters for assembling dependencies that means you have to exclude Log back and then include log4j 2 instead.


35. How do you write a JSON REST service in spring boot?
Any Spring @RestController in a Spring Boot application should render JSON response by default as long as Jackson2 is on the classpath.


36. How do you Write an XML REST service in spring boot?
If you have the Jackson XML extension (Jackson-dataformat-XML) on the classpath, it will be used to render XML responses.


37. What is the default Multipart444 File Uploads size in spring boot?
By default, Spring Boot configures Spring MVC with a maximum file of 1MB per file and a maximum of 10MB of file data in a single request.
  
   Git ----> https://github.com/ramram43210/Java_Spring_2019/tree/master/JavaEE_2019/SpringBootDemo_file_upload


38. How do you Enable HTTP response compression in spring boot?
HTTP response compression is supported by Jetty, Tomcat, and Undertow. It can be enabled by adding server.compression.enabled=true in application.properties.


39. How do you add Add a Servlet, Filter or Listener to an application?
There are two ways to add Servlet, Filter, ServletContextListener and the other listeners supported by the Servlet spec to your application. You can either provide Spring beans for them or enable scanning for Servlet components.

===========================================================================================
 
 Thymeleaf890 := [ https://www.javatpoint.com/spring-boot-thymeleaf-view ]
~~~~~~~~~~~~~~~
----> Thymeleaf is an server-side Java Template-Engine that is licensed under the Apache License 2.0.
      It is a HTML5/XHTML/XML.

==============================================================================================


---->Can we use Spring Boot for non-Spring application?
No, Spring Boot has limited to Spring based application only. We can not use Spring Boot for non Spring applications.


---->How can we create a custom endpoint in Spring Boot Actuator?
To create a custom endpoint using Spring Boot 1.x, we should expose the instance of the custom endpoint class as a bean. We need to implement Endpoint<T> interface.

@Component
public class CustomEndpoint implements Endpoint {
 //method implimentation
}
Copy
Spring Boot 2.x changed it by introducing @Endpoint annotation. Spring Boot expose endpoints with @Endpoint, @WebEndpointor @WebEndpointExtension over HTTP using Jersey, Spring MVC, or Spring WebFlux.Read Custom Endpoint in Spring Boot Actuator for more detail.

---->What is a shutdown in the actuator?
Spring Boot actuator provides a shutdown endpoint. This endpoint allows the graceful shutdown of the application. This end point disabled by default and we need to enable this in case we need to use this service. We can enable this end point using project.properties 

management.endpoint.shutdown.enabled=true

-------------------------------------------------------------------------------------------------------------


----> How to configure database using Spring Boot?
The Spring Framework provides extensive support for working with SQL databases, from direct JDBC access using JdbcTemplate to complete “object-relational mapping” technologies such as Hibernate. To connect configure the database for your Spring Boot application, use the spring-boot-starter-jdbc or spring-boot-starter-data-jpa “starters”.To configure datasource configuration, use the application.properties file in your application.

spring.datasource.url=jdbc:mysql://localhost/javadevjournal
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

-------------------------------------------------------------------------------------------------------------

---->How can we use Jetty instead of the tomcat in our web application?
Spring Boot web starters use Tomcat as the default embedded servlet container. When switching to a different HTTP server, we need to exclude the default dependencies besides including the one we need. Spring Boot provides separate starters for HTTP servers to help make this process as easy as possible. To use Jetty, we need to exclude Tomcat and include Jetty in our application’s pom.xml file.

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	<exclusions>
		<!-- Exclude the Tomcat dependency -->
		<exclusion>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</exclusion>
	</exclusions>
</dependency>
<!-- Use Jetty instead -->
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-jetty</artifactId>
</dependency>


-------------------------------------------------------------------------------------------------------------

---->Why do we need spring-boot-maven-plugin?
Spring Boot Maven plugin provides Spring Boot support in the maven. This plugin provides options to create an executable jar or war files. Here are goals for this plugin.

boot: run runs your Spring Boot application.
spring-boot:repackage repackages your jar/war to be executable.
spring-boot:start and spring-boot:stop to manage the lifecycle of your Spring Boot application (i.e. for integration tests).
spring-boot:build-info generates build information that can be used by the Actuator.
To include this plugin in your project, add XML in the plugins section of your pom.xml



---->How to disable specific auto-configuration in spring boot?
To exclude specific auto-configuration classes, use the exclude attribute of @EnableAutoConfiguration to disable them. Here is a sample code for the same.

@Configuration
@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
public class CustomConfiguration {
}

=============

To work with interceptor, you need to create @Component class that supports it and it should implement the HandlerInterceptor interface.
  
  preHandle() method − This is used to perform operations before sending the request to the controller. This method should return true to return the response to the client.

  postHandle() method − This is used to perform operations before sending the response to the client.

 afterCompletion() method − This is used to perform operations after completing the request and response. 

 
=========================================================================================
                  
 Profiles444 :=  [ https://github.com/TechPrimers/spring-boot-profiles-example ]
~~~~~~~~~~~~~~   [ https://github.com/kishanjavatrainer/SpringBootProfilesApp2 ]
                 [ https://github.com/Java-Techie-jt/spring-profile ] 

 --- Used to Switch between Environments && Restrict Some Configuration to it. 
 --- Swagger may Work in Local-Environment && Fail in Production-Environment


There are two ways to set the active profile in Spring Boot.
Pass in the active profile as an argument while launching the application.
Use the application.properties file to set the active profile.
java -jar -Dspring.profiles.active=production application-1.0.0-RELEASE.jar //pass as command line argument

 Save file as  application-dev.properties
               application-test.properties
			   application-prod.properties
 
 
 In Application.Properties :=  spring.profiles.active=production
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

---->What is the Spring Boot Initilizr?
Spring Boot Initilizr is a web interface which to rapidly create spring boot projects. Using this tool you can
create Maven and Gradle projects.

==============

 Building a 'WAR' :=
~~~~~~~~~~~~~~~~~~~
 --- We like launchable JARs, but you can still use WAR format if you prefer. Spring Boot Tools take care of repackaging a WAR to make it executable. 
 --- If you want a WAR to be deployable (in a "normal" container), then you need to use "--SpringBootServletInitializer--" instead of or as well as SpringApplication
 --- We need to extend the class "-SpringBootServletInitializer-" to support WAR file deployment (***********)

=================

--->Spring MVC framework can be used to create web applications as well as restful web services capable of returning XML as well as JSON response.

---->Spring Bean configuration file is used to define all the beans that will be initialized by Spring context.


---->How to disable the web server configuration in your Spring Boot application?
Spring Boot automatically starts an application in web server mode if it finds the web module in the classpath. To disable the web server configuration, set the webApplicationType to none in the application.properties file.

                   spring.main.web-application-type=none


---->How to enable HTTP Response Compression in Spring Boot?
Spring Boot supports the HTTP response compression for the following application servers:
Tomcat
Jetty
Undertow
To enable this feature, set the server.compression.enabled property to true in the application.properties
server.compression.enabled=true


  Profiles in Maven :=
~~~~~~~~~~~~~~~~~~~~~~
 --- Run Specific Plugins in Specific-Environment.

    <activateByDefault>  </activateByDefault> 


===========================================================================================

 MultiModuleProject := [https://www.javatpoint.com/spring-boot-multi-module-project]
~~~~~~~~~~~~~~~~~~~~~~~
 --- It is built from a parent pom that manages a group of submodules.
 --- Splitting the project into multiple modules is useful and easy to maintain.
 --- The child modules are actual Spring Boot projects that inherit the maven properties from the parent project.
 --- When we run the multi-module project, all the modules are deployed together in an embedded Tomcat Server.
 --- We can deploy an individual module, also.
 
                      EAR > WAR > JAR
					  
		WAR ---> Web module contains servlet classes, JSP files, HTML files, JavaScripts, etc.(loads in WebContainer)
		
		 The Java Application Server has two containers: (1) Web Container and (2) EJB Container.

  (1) Web-Container ---> hosts the web applications based on Servlet API and JSP. The web container requires the web module to be packaged as a WAR file. It is a WAR file special JAR file that contains a web.xmlv file in the WEB-INF folder.

  (2) EJB-Container ----> An EJB Container hosts Enterprise Java beans based on EJB API. It requires EJB modules to be packaged as a JAR file. It contains an ejb-jar.xml file in the META-INF folder.
		
   
 
============================================================================================

 Swagger220 :=  https://dzone.com/articles/spring-boot-restful-api-documentation-with-swagger
~~~~~~~~~~~~~   [SBMS 7AM  12/12/2020]
 
  https://github.com/kishanjavatrainer/SpringBootSwaggerApp
  https://github.com/dpgupta1989/RestAPIDemo
  
  https://github.com/TechPrimers/spring-boot-swagger-example
  https://github.com/Java-Techie-jt/spring-swagger
  
  https://github.com/SimpleProgramming/spring-boot-ehCache-CacheManager
  https://github.com/SimpleProgramming/spring-boot-swagger-ui
  https://github.com/SimpleProgramming/spring-boot-swagger-codegen-maven-plugin
  https://github.com/greenlearner01/Microservices/  (******)
  
   
  JSONDocs ---> https://github.com/Java-Techie-jt/Spring-JsonDocs   /// EnableJSONDocs
  

Q) What is Swagger?
--------------------
Swagger is an ecosystem which is used to generate documentation for REST apis.

Using Swagger-UI , we can test our REST Apis also

-> Swagger Configuration we will add in Rest Api project.

-> All our api details will be available in swagger. Using documentation provided by swagger, client side team can start their development.

Swagger documentation Contains below details
--------------------------------------------
1) Resource method Types 

2) Resource method URLs

2) Resource Method Consumes types

3) Resource Method Produces types

4) Resource Method Input Data Structure

5) Resource method Output Data Structure


---->What is Swagger2?
 --- Defined as Accessing One-Service of one application from another using Documentation (created by Swagger [WSDL] ) .
 
         App1 -----> WSDL -----> App2
       (Consumer)             (Provider)

    Swagger ---> generate doucmentation for Rest-API
	
	Swagger-UI ----> test Rest-API functionality
	
	Swagger-Documentation ----> to Develop rest-Client
	
	
	  WSDL ----> Provide Documentation && Details if Producer-/-(Provider) is a SOAP-Based.  // Documentation in XML-based
	
	Swagger ---> Provide Documentation && Details if Producer-/-(Provider) is a REST-Based. //  Documentation in JSON-based
	
	             It is UI-Component to test REST-API.
				 
		SwaggerConfig ---> generates Configuration for API. (--@EnableSwagger2--)
		
		
  Annotations :=  [ https://www.javainuse.com/spring/boot_swagger_annotations ]
~~~~~~~~~~~~~~~		
    @API            ------> provides   description of API.
	@APIParam       ------> describes the exposed REST API.
    
	@APIOperation   ------> describes the endpoint and its response type  /// PUT --- updateBooks
    @ApiModelProperty ----> describes the properties of the Model-Class in JSON Property 
	  @API            ----> Title to Controller 
    
	@ApiResponses  -------> describe the expected responses for the REST API. 
                           It describes an operation or typically a HTTP method against a specific path.
  
  
   Eg :=  @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
  ~~~~
 
   http://localhost:8965/swagger-ui.html
   
    http://localhost:8965/v2/api-docs
 
  Dependencies ----> springfox-swagger2 // springfox-swagger-ui
  
 Eg :=
~~~~~~

@EnableSwagger2
@Configuration
public class SwaggerConfig {

	@Bean
	public Docket docket() {

		return new Docket(DocumentationType.SWAGGER_2).select()
				.apis(RequestHandlerSelectors.basePackage("com.techprudent")).paths(PathSelectors.any()).build()
				.apiInfo(apiInfo());
	}
	
 
Dependencies :=
~~~~~~~~~~~~~~
 <dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.6.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.6.1</version>
			<scope>compile</scope>
		</dependency>
		
 Eg22 :=
~~~~~~

		//1. Rest Template object
		RestTemplate rt = new RestTemplate();
		
		//2. URL 
		String url="http://localhost:8080/employee/remove/{id}/{name}";
		
		//3. make Req call and get Response
		// rt.delete(url, 50); //void
		// URL, HttpMethod, Request, ResponseType, pathVariables
		ResponseEntity<String> resp = rt.exchange(url, HttpMethod.DELETE, null, String.class, 5858,"SAM");
		
		//4. print response
		System.out.println("Status code - " + resp.getStatusCode().name());
		System.out.println("Status num - " + resp.getStatusCodeValue());
		System.out.println("Response - " + resp.getBody());

		//5. stop server
		System.exit(0);
		
 
 Eg33 :=
~~~~~~
		RestTemplate rt = new RestTemplate();
		
		String url="http://localhost:8080/employee/modify/{id}";
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		
		String body="{\"name\":\"SAM\",\"sal\":500.0}";
		
		HttpEntity<String> requestEntity = new HttpEntity<>(body, headers);
		
		//URL, reqMethod, reqEntity, ResponseType, pathVariables
		ResponseEntity<String> resp = rt.exchange(url, HttpMethod.PUT, requestEntity, String.class, 500);
		
		
		System.out.println("Status code - " + resp.getStatusCode().name());
		System.out.println("Status num - " + resp.getStatusCodeValue());
		System.out.println("Response - " + resp.getBody());

		System.exit(0);

=============================================================================================

 Chache440 :=
~~~~~~~~~~~

 --- https://www.javatpoint.com/spring-boot-cache-provider
 --- https://www.javatpoint.com/spring-boot-caching
 --- https://www.javatpoint.com/spring-boot-ehcaching
 
 --- https://github.com/greenlearner01/Ehcache-with-SpringBoot

=================================================================================================
 
 ErrorHandling490 :=  [ http://zetcode.com/springboot/controlleradvice/ ]
~~~~~~~~~~~~~~~~~~  [ https://mkyong.com/spring-boot/spring-rest-error-handling-example/ ]
 
  src/main/resources/template/error/ 4xx.html
 
 
 catch (Exception e) {
			logger.error("error createEmployee EmployeeServiceImpl ::::" + e.getMessage());
			response.setTimestamp(LocalDateTime.now());
			response.setStatusCode("422");
			response.setStatusMessage(e.getMessage());
			return new ResponseEntity<Object>(response, HttpStatus.UNPROCESSABLE_ENTITY);
		}

=================================================================================================

 SpringBootCache880 := [ https://github.com/sumitMultani/spring-boot ]
~~~~~~~~~~~~~~~~~~~~~
 --- Subsequent Request will receive Copy-Of-Request called "-CACHE-". 
 
 --- Acts like a "-Temporary-Memory-" between DB && Aplication && Reduces DB-Hits by storing Recently(Frequently) used data.  

                  @EnableCaching ----> At Main-Method Level
				  
				  @CacheConfig(cacheNames= "studentcaChe", key="student.id") ----> At method level.
				  
				  @EnablePut(cacheNames= "studentcaChe", key="student.id") ----> At method level.

===================================================================================================

 SpringTransactional := [ https://github.com/PlayProCode/PlayJava/tree/master/transactionPractice ]
~~~~~~~~~~~~~~~~~~~~~~

  [ https://www.youtube.com/watch?v=z7Tqo4ppNm4&list=PLn2GH4dN5i2BjapGeQ8mkuu2SklDMpsx1&index=3&ab_channel=PlayJava ]
  
  
----> Applied at Service-Layer at method-Level where we write Business-Logic

---> It is applied, in-Order-to treat Bunch of Transaction as Single-Unit as Proxy.

              @Tranasactional(RollBackFor=NumberFormatException.class)



===================================================================================================

 BootRegEx :=  [ https://github.com/greenlearner01/springboot-regex ]
~~~~~~~~~~~~
   
   
================================================================================================================

   SpringBatch660 :=  [******SBMS 7:00 AM 30TH(dec)_to_18TH /01/2021*********]
 ~~~~~~~~~~~~~~~~~
 
   https://github.com/TechPrimers/spring-batch-example-1
  
   https://github.com/kishanjavatrainer/SpringBootBatchCvsToDb
   https://github.com/kishanjavatrainer/SpringBootBatchDbToCsv
   
   https://github.com/kishanjavatrainer/SpringBootBatchDbToXml
   https://github.com/kishanjavatrainer/SpringBootBatchXmlToDb
   
   https://github.com/kishanjavatrainer/MultiResourceItemReaderSpringBatch
   https://github.com/kishanjavatrainer/SpringBootBatchSchedulerProject
   
   
  Spring Batch :=  [ https://github.com/sumitMultani/spring-batch-example ]
~~~~~~~~~~~~~~

  --- @EnabelBatchProcessing //
  --- JobRepositary has 
                       (1) JobLauncher
                       (2) Job
					   (3) Step [   (a) ItemReader ----> Reads Data from CSV file.
    
	                                (b) ItemProcessor ---> Process Data.
									
									(c) ItemWriter ----> Saves Data in Database. ]
   
   
===============================================================================================================

 RedisDB :=  [ https://github.com/microsoftarchive/redis/releases ]  /// Cache for Distributed Transaction . 
~~~~~~~~~      https://github.com/greenlearner01/Redis_Cache-With-SpringBoot

  ---> redis-server.exe
  ---> redis-cli.exe
   

Today's session : Cache Implementation
--------------------------------------

-> Cache is a temporary storage

-> Redis is a No SQL database which works on the concept of key-value pair.

-> Whenever we need to access same data frequently then its better to maintain that data in cache to improve performance of application.

-> If we read same data for multiple times from db it will decrease performance of the application. Because DB interaction is costly operation.


Q) Can we store all db tables data in Cache Memory?
----------------------------------------------------
-> In database we will have 2 types of tables

	1) Transactional Tables
	2) Non Transaction Tables
	

 Redis Data Type :=
~~~~~~~~~~~~~~~~~~~
There are five types of data types supported by Redis database.
 (1) Strings
 (2) Hashes
 (3) Lists
 (4) Sets
 (5) Sorted Sets


What is Transactional Table?
----------------------------
If table data is getting inserted/updated/deleted from the application then it is called as Transactional table.


What is Non-Transactional Table?
--------------------------------
If application is performing only read operation on the table then that table is called as Non-Transactional table.

-> If we implement cache in one project, then it is called as Local Cache. Only that project can access data from that local cache. It is suitable for Monolith Architecture Based Projects.

-> When we implement project using Microservices architecture we will have multiple services. If we want cache data in all services we should go for Global Cache. It is also called as 'Distributed Cache'.

-> If we implement distributed cache, all services can access data from distributed cache only.

-> Now a days in industry, we are using Redis Cache to maintain Distributed Cache.


What is Redis? 
---------------
Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. 

It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>


Spring Boot with Redis cache (Distributed Cache)
------------------------------------------------

-> To establish connectivity with Redis Server we will use JedisConnectionFactory bean

-> Using JedisConnectionFactory bean we will create RedisTemplate bean

-> Using RedisTemplate bean we will get HashOperations

-> HashOperations bean provided methods to perform operations with Redis Cache.

	put
	get
	delete	
	entries



Redis Architecuture
--------------------
Redis Server 

Redis Client


Redis  vs RDBMS (*************)``
---------------
Redis stores everything in primary memory
RDBMS stores everything in secondary memory

Redis : Read & Write operations will be fast because of primary memory storage
RDBMS : Read & Write operations will be slow because of secondary memory storage

Redis : Primary memory size will be less so storaing large files and binary data not recommended

RDBMS : Secondary memory size will be more so we can store large and binary files also


Redis : Used for storing small textual info which needs to accessed, modified and inserted at very fast rate.

RDBMS : Recommended to hold huge amount of data



Who will load data into Redis Cache?
------------------------------------
Admin team is responsible to load data into Redis cache in the form of key and value pair



Setting Up Redis Server in Windows Machine
----------------------------------------------
1) Download Redis Software from below URL

   URL : www.github.com/microsoftarchive/redis/releases

2) Extract Downloaded zip file and open folder structure

3) Execute redis-server.exe file to start redis server in our machine.

4) Execute redis-client.exe file to start redis client cli

5) Once Redis Client CLI is started just execute 'ping' it should give PONG as response.

Note: With above steps Redis software setup is done in our machine



Command to store data in Redis in the form of KEY and VALUE
-----------------------------------------------------------
SET KEY "VALUE"

Ex: SET UNAME "Ashok"

Command to get data from redis using KEY
----------------------------------------
GET "KEY"

Ex: GET "UNAME"

Command to get all keys from REDIS Server
-----------------------------------------
KEYS *

Developing Spring Boot Application To communicate with Redis Cache
------------------------------------------------------------------
1) create Spring boot application with below dependencies

	1)spring-boot-starter-web
        2)project lombok
        3)spring-boot-starter-data-redis
        4)devtools
		
------------------------------------------------------------------

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

      Method to Perform Redis-Operation ----> hashOperations(HashVlaue, Key, Value)
	   
	    Jedis ---> Redis ---> Dao
	  
	  
------------------------------------------------------------------


2) Configure JedisConnectionFactory as a bean. This bean will establish connection between boot application and redis server.
If Redis server is running in different machine then we have to set Redis Server details to jcf object.

@Bean
JedisConnectionFactory jedisConnectionFactory() {
    JedisConnectionFactory jcf = new JedisConnectionFactory();
    return jcf;
}

3) Configure RedisTemplate as a Spring bean by injecting JedisConnectionFactory bean obj.


@Bean
RedisTemplate<String, User> redisTemplate() {
 RedisTemplate<String, User> redisTemplate = new RedisTemplate<>();
 redisTemplate.setConnectionFactory(jedisConnectionFactory());
 return redisTemplate;
}


4) Create Repository Interface and Impl class to perform Redis Operations. To perform Redis Operations we will use RedisTemplate bean.

@Repository
public class UserRepoImpl implements UserRepo{

     private HashOperations hashOperations;
     
     public UserRepoImpl(RedisTemplate rst){
           this.hashOperations = rst.opsForHash();
     }
}
================

---> JedisConnectionFactory class is used to establish connection with Redis Server.

If Redis Server and our client application are in same machine then no need to set any
configuration details.

If Redis Server running on different machine then we should set host-name and port-number of Redis server to jedis-con-factory.


	@Bean
	private JedisConnectionFactory jedisConnectionFactory() {
		JedisConnectionFactory jcf = new JedisConnectionFactory();
		jcf.setHostname();
	        jcf.setPort();
		return jcf;
	}

	@Bean
	private RedisTemplate<String, User> redisTemplate(){
		RedisTemplate<String, User> redisTemplate = new RedisTemplate();
		redisTemplate.setConnectionFactory(jedisConnectionFactory());
		return redisTemplate;
	}


---> Using RedisTemplate we can get HashOperations impl object

=======================

Configuring 2 Data Sources in Spring Boot
-----------------------------------------

-------------------application.properties-----------------------

#Oracle Data Source for Users Data
spring.user.datasource.url=
spring.user.datasource.username=
spring.user.datasource.password=
spring.user.datasource.driver-class-name=

#MySql DataSource For Books Data
spring.book.datasource.url=
spring.book.datasource.username=
spring.book.datasource.password=
spring.book.datasource.driver-class-name=
------------------------------------------------------------------
package com.ashokit.config;

import java.util.HashMap;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
		entityManagerFactoryRef = "bookEntityManagerFactory", 
		transactionManagerRef = "bookTransactionManager", 
		basePackages = {
				"com.ashokit.book.repository"
		}
)
public class BookDBConfig {

	@Bean(name = "bookDataSource")
	@ConfigurationProperties(prefix = "spring.book.datasource")
	public DataSource dataSource() {
		return DataSourceBuilder.create().build();
	}

	@Bean(name = "bookEntityManagerFactory")
	public LocalContainerEntityManagerFactoryBean bookEntityManagerFactory(EntityManagerFactoryBuilder builder,
			@Qualifier("bookDataSource") DataSource dataSource) {
		
		HashMap<String, Object> properties = new HashMap<>();
		properties.put("hibernate.hbm2ddl.auto", "update");
		
		return builder.dataSource(dataSource)
					  .properties(properties)
					  .packages("com.ashokit.book.model")
					  .persistenceUnit("Book")
					  .build();
	}

	@Bean(name = "bookTransactionManager")
	public PlatformTransactionManager bookTransactionManager(@Qualifier("bookEntityManagerFactory") EntityManagerFactory bookEntityManagerFactory) {
		return new JpaTransactionManager(bookEntityManagerFactory);
	}
}
-------------------------------------------------------------
package com.ashokit.config;

import java.util.HashMap;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
		entityManagerFactoryRef = "entityManagerFactory", 
		basePackages = {
				"com.ashokit.user.repository"
		}
)
public class UserDBConfig {
	
	@Primary
	@Bean(name = "dataSource")
	@ConfigurationProperties(prefix = "spring.user.datasource")
	public DataSource dataSource() {
		return DataSourceBuilder.create().build();
	}

	@Primary
	@Bean(name = "entityManagerFactory")
	public LocalContainerEntityManagerFactoryBean entityManagerFactory(EntityManagerFactoryBuilder builder,
			@Qualifier("dataSource") DataSource dataSource) {
		
		HashMap<String, Object> properties = new HashMap<>();
		properties.put("hibernate.hbm2ddl.auto", "update");
		
		return builder.dataSource(dataSource)
					  .properties(properties)
					  .packages("com.ashokit.user.model")
					  .persistenceUnit("User")
					  .build();
	}

	@Primary
	@Bean(name = "transactionManager")
	public PlatformTransactionManager transactionManager(@Qualifier("entityManagerFactory") EntityManagerFactory entityManagerFactory) {
		return new JpaTransactionManager(entityManagerFactory);
	}
}


---> Acts as a Cache which is used to display Same-Data(Read-Only) multiple times
 
---> Start Redis-Server(6379) && Redis-Client (PING --- PONG)

---> Add dependencies 'Spring-boot-starter-data-redis' && 
     Configure JedisConnectionFactory as Bean to eastablish connection wirh Redis-Server.
 
  @Bean
  JedisConnectionFactory jedisConnectionFactory(){
     JedisConnectionFactory jcf = new JedisConnectionFactory();
	 return jcf;
 }

---> Configure RedisTemplates as a Bean by Injecting JedisConnectionFactory Bean Obj. 

            JedisTemplate ----> RedisTemplate ----> HashOperations ---> DAO .           

---> Perform Operations using '-HashOperations<HK,K,V>-' .

=================================================================================================

 Cache330 := [ https://www.javatpoint.com/spring-boot-caching ]
~~~~~~~~~~~
----> Types of Caching ::
 --- In-memory Caching    [ Redis]
 --- Database Caching     [First-Level-Cache]
 --- Web server Caching   [Web-page]
 --- CDN Caching          [Images,Videos]
 
 Why should we use the cache?
The primary reason for using cache is to make data access faster and less expensive. When the highly requested resource is requested multiple times, it is often beneficial for the developer to cache resources so that it can give responses quickly. Using cache in an application enhances the performance of the application. Data access from memory is always faster in comparison to fetching data from the database. It reduces both monetary cost and opportunity cost.


             @EnableCaching ----> Class level Annotation 
             @Cacheable --------> Method level annotation 

=================================================================================================
 
  BootMongoDB :=
~~~~~~~~~~~~~~~

  CRUD ----> https://github.com/chargeahead/SpringBootMongoDBCRUDRESTServices






==================================================================================================================

 SpringBatch880  :=
~~~~~~~~~~~~~~~~~
   https://examples.javacodegeeks.com/enterprise-java/spring/batch/spring-batch-itemreaders-and-itemwriters-example/
  
  
 (Q).What is the need of BatchUpdates?  
 (A) The BatchUpdates feature allows us to group SQL statements together and send to database server in one single trip. 

  
 SpringBootFaceBook995 :=
~~~~~~~~~~~~~~~~~~~~~~~
 https://www.youtube.com/watch?v=-A3I4KxzYyI&list=PLZdfbI_OZWAOSwOLb1Q45YEApKMRspez2&ab_channel=AlmightyJava

=================================================================================================
 
 PCF660 :=  (Youtube :: Green-Learner)
~~~~~~~~

 PCF :=
~~~~

Cloud Computing works based on pay-as-you-go concept


To celebrate one function in house, we don't purchase shamiyana materal. we will take for rent and will use for our function. After function got completed, we will return that materal by paying rent amount.


To develop one application, we need computer, we need OS, we need some softwares like JIRA, JENKINS, Database, Application Server etc... Instead of purchasing all these softwares, we can take them for rent on reantal basis.

Based on our usage, we need to pay rent for those softwares.

There are several Cloud Provieders Available in Market
------------------------------------------------------
AWS (Amazon Webservices)
Azure (Microsoft)
PCF (Pivotal Cloud Foundry)
GCP (Google Cloud)
IBM Cloud etc....

Cloud Computing is categorized into 3 types
-------------------------------------------

1) IaaS : Infrastructure as a service

	Ex: AWS EC2

2) SaaS : Software as a service

	Ex : Google Apps, DropBox

3) PaaS : Platform as a service

	Ex : PCF	
	

----> It is a Server that support Spring-boot application deployment in cloud env.

Steps to work with PCF:
1. Create Account in PCF
2. Download and Install PCF CLI(Client App)
3. Write Boot Application and convert to jar/war
4. Login using PCF client and Push App to PCF
-----------------------------------
1. Create Account in PCF
Gmail:
raghusnithyd2020@gmail.com
raghu2020nit

> Goto https://run.pivotal.io/
> Click on SIGN UP FOR FREE
> Fill Form with all details
raghusnithyd2020@gmail.com
<YourPWd>
> Come back to Gmail account and activate PCF.
> TO login next time , enter URL:
  https://login.run.pivotal.io/
> Click on Pivotal Web Services Option
> Enter company name : nit-hyd-new (ex)
> Next > Enter Mobile number for verification
> Enter OTP > Next
> Create one org-name : raghu-nit-test

For Login next time:
 https://login.run.pivotal.io/login

=======================================
2. Download and Install PCF CLI(Client App)
> Goto https://console.run.pivotal.io/tools
> Choose OS and Click SAME
> It will download on ZIP
> Extract and install : cf_installer
> Next > Next > Finish

=======================================
3. Write Boot Application and convert to jar/war

a. Create one Spring Boot application (ex: web app)
b. Write one rest controller
package in.nit.controller;

import java.util.Date;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeRestController {

@GetMapping("/")
public String showMsg() {
return "Hello From App: RAGHU!"+new Date();
}
}

c. Convert project into jar file
> Right click on project > Run As > Maven Install
> Once Build success > Right click on Project > Refresh
> YOu can find jar file in 'target' folder.
 ex: springapp-1.0.jar
==================================================
4. Login using PCF client and Push App to PCF

a. Create one manifest.yml file inside project
> Right click on project name
> File > enter name 'manifest.yml' > next > finish

--manifest.yml---
applications:
- name: SpringBootCloudApp
  memory: 500M
  path: target/SpringBoot2CloudApp-1.0.jar
----------------

b. open cmd prompt, move to Project location
C:\Users\User>cd E:\Boot6PM\SpringBoot2CloudApp
C:\Users\User>e:
E:\Boot6PM\SpringBoot2CloudApp>

c. Login to PCF
type cmd > cf login -a https://api.run.pivotal.io/
Enter username and password

d. push application to PCF
cmd > cf push

e. come back to PCF account
> click on org name > click on development
> click on Project link
-----------------------------------------------
************************************************
Application with DB

1. Write one application with MySQL Db code
2. Right click on project > Run as > maven install
3. create manifest.yml

applications:
- name: SpringBootWeb
  memory: 1024M
  path: target/SpringBootWeb-1.0.jar
  services:
  - mysqldb

4. Come back to PCF account and click on services
 > Add a service
 > choose ClearDb MySQL DB
 > choose Free Option Spark DB
 > click on Choose Plan
 > Enter Instance name : mysqldb
 > Add Service

5. come to cmd and move to project folder
   and push application
   
==================================================================================================

---->What are the other Starter Project Options that Spring Boot provides?
Spring Boot also provides other starter projects including the typical dependencies to develop specific type of applications

 spring-boot-starter-web-services - SOAP Web Services
 spring-boot-starter-web - Web & RESTful applications
 spring-boot-starter-test - Unit testing and Integration Testing
 spring-boot-starter-jdbc - Traditional JDBC
 spring-boot-starter-hateoas - Add HATEOAS features to your services
 spring-boot-starter-security - Authentication and Authorization using Spring Security
 spring-boot-starter-data-jpa - Spring Data JPA with Hibernate
 spring-boot-starter-data-rest - Expose Simple REST Services using Spring Data REST


---->How can I add custom JS code with Spring Boot?
Create a folder called static under resources folder. You can put your static content in that folder.
For your example the path to myapp.js would be resources\static\js\myapp.js
You can refer to it in jsp using
<script src="/js/myapp.js"></script>

---->What happens if H2 is not in the classpath?
You get this error
Cannot determine embedded database driver class for database type NONE

-------------------------------------------------------------------------------------------------------------
\

---->What is the need for Profiles?
Enterprise application development is complex. You have multiple environments

Dev
QA
Stage
Production
You want to have different application configuration in each of the environments.

Profiles help to have different application configuration for different environments.

Spring and Spring Boot provide features where you can specify

What is the configuration for various environments in different profiles?
Set the active profile for a specific environment.
Spring Boot would pick up the application configuration based on the active profile that is set in a specific environment.
 



SpringBootStarterParent :=
~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---parent pom declarations allows us to manage following things for multiple child projects.

 ---Configuration: It allows us to maintain consistancy in terms of java version and other related properties across all sub projects.
Depedency Management: This will control all versions of the dependencies to avoid dependency version conflicts.
 


---->How to implement exception handling using Spring Boot?
Spring provides a very useful way to handle exceptions using ControllerAdvice. We handle all exceptions thrown by the controller class by implementing a ControlerAdvice class.


---->Can Spring Boot be compatible with older Spring projects? How do I do this?
A) Compatible, use @ImportResourceannotations to import old Spring project configuration file.

-------------------------------------------------------------------------------------------------------------


---->What are few frequently used Spring Boot annotations?
@SpringBootApplication : mark the main class of a Spring Boot application
@SpringBootTest : used for Integration testing
@Configuration : used to provide bean configurations
@Conditional: You can create custom auto configuration classes
@ConditionalOnBean
@Bean
@DataJpaTest :Slice test you JPA layer
@WebMVCTest : Slice test you MVC layer
@Value : Use to bind the property quickly
@ControllerAdvice : Good for handling exception
@ConditionalOnMissingBean
@ConditionalOnClass
@ConditionalOnMissingClass




===================/\\/\/\/\\/====================\/\\/\\//==================\/\\/\/========================================

 
---->How to configure the Logger(logging) in Spring Boot? How to change default logging level?
Spring Boot uses Commons Logging for all internal logging but leaves the underlying log implementation open. Default configurations are provided for Java Util Logging, Log4J2, and Logback. Also By default, if we use the Starters, Logback is used for logging.

Enable a debug mode by starting your application with a --debug flag.
$ java -jar myapp.jar — debug

From application.properties
debug=true

By default, Spring Boot logs only to the console and does not write log files. If we want to write log files, we can set alogging.file or logging.path property in your application.properties.
Changing the log level

logging.level.root=WARN
logging.level.com.myapp=DEBUG
logging.level.org.thirdpary.app=ERROR

-------------------------------------------------------------------------------------------------------------


---->Explain how Spring Boot Profiles works? How to configure multiple Profiles?
Spring Profiles provide a way to segregate parts of your application configuration and make it be available only in certain environments. For example, we can use a separate profile for testing. Any @Component or @Configuration can be marked with @Profile to limit when it is loaded.
@Configuration
@Profile(“production”)
public class MySecurityConfiguration{
}

We can use a spring.profiles.active Environment property to specify which profiles are active.
                
				   spring.profiles.active=test

From the command-line, we pass the following parameters
                            $java -jar myapp.jar  — spring.profiles.active=dev



-------------------------------------------------------------------------------------------------------------

---->How to depoy Spring Boot application as a WAR?
spring-boot-maven-plugin added in ourpom.xmlautomatically tries to rewrite archives to make them executable by using the spring-boot:repackage goal.
we can change the default packaging from pom.xml by
<packaging>war</packaging>
And, we initialize the Servlet context required by Tomcat context. we can implement the SpringBootServletInitializer interface.
@SpringBootApplication
public class MainClass extends SpringBootServletInitializer {
}


---->How to disable the Spring Security in Spring Boot application?
we can disable security auto-configuration by excluding the SecurityAutoConfiguration class from Spring Boot application.

  @SpringBootApplication(exclude={SecurityAutoConfiguration.class})
  public class SpringSecurityConfig{
  }


---->What is Thymeleaf?
 --Thymeleaf is a java based server-side template engine for the web application. The main advantage of Thymeleaf is to bring stylish natural templates to your web application.
 --Thymeleaf is a server-side template engine that can process XML, HTML etc.
 --Thymeleaf can access a class fields, message properties from i18n messages files.
 

----> What are the different ways to externalize configurations in Spring Boot?
There are 4 ways to externalize configurations in Spring Boot.

a. Using properties files
b. Using YAML files
c. Environment variables
d. Command line arguments

-------------------------------------------------------------------------------------------------------------


---->CommandLineRunner gives access to the application arguments as a simple String[] array where as ApplicationRunner uses the ApplicationArguments interface that provides access to both raw String[] arguments as well as parsed non-option and option arguments.

===================================================================================================================
 
 BootYAML770 :=
~~~~~~~~~~~~~~

---->What is YAML?
Yaml Ain’t a Markup Language
– Recursive acronym
• Created in 2001
• Alternative to .properties files
– Allows hierarchical configuration
• Java parser for YAML is called SnakeYAML
– Must be in the classpath
– Provided by spring-boot-starters

YAML for Properties
• Spring Boot support YAML for Properties
– An alternative to properties files
application.properties

database.host = localhost
database.user = admin
application.yml

database:
    host: localhost
    user: admin
• YAML is convenient for hierarchical configuration data
– Spring Boot properties are organized in groups
– Examples: server, database, etc

----> What is a shutdown in the actuator?
A shutdown is an endpoint that helps application to be shut down properly. This feature is not enabled by default.
However, you can use it by setting command:

        ......management.endpoint.shutdown.enabled=true.......... in your application.properties file.


Q) When to use application.yml and when to use bootstrap.yml?
------------------------------------------------------------
If we have both application.yml and bootstrap.yml in our application, Spring Boot will load bootstrap.yml first.

-> In bootstrap.yml we will configure, application-name, config-server-url etc.

==================================================================================================

 Environment440 :=
~~~~~~~~~~~~~~~~

-> Using Environment obj, we can capture on which port number our application is running. (************)

Eg :=

@Autowired
	private Environment env;

	@GetMapping("/welcome")
	public String welcomeMsg() {
		String msg = "Welcome to REST API...!!";

		String serverPort = env.getProperty("local.server.port");

		msg = msg.concat(" I am from Server Which is running on Port :: " + serverPort);

		return msg;
		
====================================================================================================

---->Explain Docker in Spring Boot.
It is a tool designed to create, deploy, and run a project by using containers.


---->What is mean by spring batch?
Spring Boot Batch provides code reusability which is important when working with large numbers of records, including transaction management, logging, skipping, job processing statistics, and job restarts.

---->Explain Apache Kafka.
Apache Kafka is an open-source messaging platform. LinkedIn develops it. Apache Kafka enables the user to build distributed applications and handle real-time data feeds. Kafka is suitable for both offline and online messaging.


---->. What is Spring Cloud?
According to the official website of Spring Cloud, Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems

-------------------------------------------------------------------------------------------------------------
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = "users")
public class Users {
  
    @XmlElement(name="user")
    private ArrayList<User> users;
  
    public ArrayList<User> getUsers() {
        return users;
    }
  
    public void setUsers(ArrayList<User> users) {
        this.users = users;
    }
}

-------------------------------------

    @GET
    @Produces("application/json")
    public Users getAllUsers() {
        Users users = new Users();
        users.setUsers(new ArrayList<>(map.values())); ........///Adding values in "map" to Aray-List.
        return users;
    }
 
-------------------------------------
 
   @PostConstruct
    public void initUsers() {
        List<User> users = Stream.of(
                new User(101, "javatechie", "password", "javatechie@gmail.com"),
                new User(102, "user1", "pwd1", "user1@gmail.com"),
                new User(103, "user2", "pwd2", "user2@gmail.com"),
                new User(104, "user3", "pwd3", "user3@gmail.com")
        ).collect(Collectors.toList());
        repository.saveAll(users);
    }
	
===============================================================================================================








