


              .......JSTL123........JSPScriptingtag123....JSPdirectives123...........JSPActionTags123
  
           .........ExceptionHandlinginJSP123........ImplicitObejct123............ExampleJSP

  
          ..........JSTLTags123...........JSTLCoreTagsList123..................


=======================================================================================================================

----> JSP technology is used to create web application just like Servlet technology. It can be thought of as an extension to Servlet because it provides more functionality than servlet such as expression language, JSTL, etc.

----> A JSP page consists of HTML tags and JSP tags. The JSP pages are easier to maintain than Servlet because we can separate designing and development.  

----> JSP technology is the extension to Servlet technology. We can use all the features of the Servlet in JSP. In addition to, we can use 
                       
					   -- implicit objects, 
					   -- predefined tags, action tags, JSTL, custom tags, etc. that reduces the code					   
					   -- expression language that makes JSP development easy.




   (index.html) -----> Run as Server
 
 
The Lifecycle of a JSP Page :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ---Translation of JSP Page
  ---Compilation of JSP Page
  ---Classloading (the classloader loads class file)
  ---Instantiation (Object of the Generated Servlet is created).
  ---Initialization ( the container invokes jspInit() method).
  ---Request processing ( the container invokes _jspService() method.......underscore _ signifies that you cannot override this method.)
  ---Destroy ( the container invokes jspDestroy() method).
 
 

----> JSP page is translated into Servlet by the help of JSP translator. The JSP translator is a part of the web server which is responsible for translating the JSP page into Servlet. After that, Servlet page is compiled by the compiler and gets converted into the class file. Moreover, all the processes that happen in Servlet are performed on JSP later like initialization, committing response to the browser and destroy.


----> Unlike Servlet, In Jsp we don't need to run, (Only compile)


----> The JSP API consists of two packages:
 (1)_javax.servlet.jsp
 (2)javax.servlet.jsp.target


----> javax.servlet.jsp package
The javax.servlet.jsp package has two interfaces and classes.The two interfaces are as follows:

 ---JspPage
 ---HttpJspPage
 
The classes are as follows :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ---JspWriter
 ---PageContext
 ---JspFactory
 ---JspEngineInfo
 ---JspException
 ---JspError


        ...............Scripting............Directives............Tags

===========================================================================================================

(1) JSPScriptingtag123 := [.....scriptlet (<%>)....expression (<%=>) .......declaration (<%!>).......] 
    ~~~~~~~~~~~~~~~~~

scriptlet tag   := 
~~~~~~~~~~~~~
 Used to execute java source code in JSP. It can only declare variables not methods.The declaration of scriptlet tag is placed inside the _jspService() method.

<form action="welcome.jsp">  
<input type="text" name="uname">  
<input type="submit" value="go"><br/>  
</form>  

 <% String name=request.getParameter("uname");  out.print("welcome "+name);  %>  



expression tag  :=  
~~~~~~~~~~~~~~
 Used to write output stream of the response. So you need not write out.print() to write data. It is mainly used to print the values of variable or method.

 <form action="welcome.jsp">  
<input type="text" name="uname"><br/>  
<input type="submit" value="go">  
</form>

 <%= "Welcome "+request.getParameter("uname") %>  



declaration tag :=  
~~~~~~~~~~~~~~~
 Used to declare fields and methods.The code written inside the jsp declaration tag is placed outside the service() method of auto generated servlet.So it doesn't get memory at each request. The declaration of jsp declaration tag is placed outside the _jspService() method.

   <%! int data=50; %>  
   <%= "Value of the variable is:"+data %> 
 -----------------------------------------
  <%!   
  int cube(int n){  
   return n*n*n;  
  }  
 %>  
 <%= "Cube of 3 is:"+cube(3) %> 

===========================================================================================================================

(2) JSPdirectives123 :=   [.....page ....include ......tagLib .......] 
   ~~~~~~~~~~~~~~~
 Used to tells the web container how to translate a JSP page into the corresponding servlet.
 
      
	       Syntax of JSP Directive ~~~~~~~~   <%@ directive attribute="value" %> 
		   
		   Syntax of JSP page directive ~~~~~ <%@ page attribute="value" %> 


Attributes of JSP page directive :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   import.........contentType........isELIgnored......isThreadSafe........info.........extends........buffer 

   language......autoFlush......session...... pageEncoding.......errorPage.......isErrorPage




page ---> The page directive defines attributes that apply to an entire JSP page.
	
	                             <%@ page attribute="value" %> 
 
Include ---->used to include the contents of any resource it may be jsp file, html file or text file. The include directive includes the original content of the included resource at page translation time .
   
   --- include directive includes the original content, so the actual page size grows at runtime.

                               <%@ include file="resourceName" %>


tagLib -----> JSP taglib directive is used to define a tag library that defines many tags. We use the TLD (Tag Library Descriptor) file to define the tags. In the custom tag section we will use this tag so it will be better to learn it in custom tag.

                    <%@ taglib uri="uriofthetaglibrary" prefix="prefixoftaglibrary" %>
					
					
===========================================================================================================================
(3) JSPActionTags123 :=
  ~~~~~~~~~~~~~~~~~
Each JSP action tag is used to perform some specific tasks.The action tags are used to control the flow between pages and to use Java Bean.



   jsp:forward ~~~~~~     forwards the request and response to another resource.
   
   jsp:include ~~~~~~~~~  includes another resource.
   
   jsp:useBean ~~~~~~~    creates or locates bean object.
   
   jsp:setProperty ~~~~~~ sets the value of property in bean object.
   
   jsp:getProperty ~~~~~~ prints the value of property of the bean.
   
   jsp:plugin  ~~~~~~~~   embeds another components such as applet.
   
   jsp:param ~~~~~~~~    sets the parameter value. It is used in forward and include mostly.
   
   jsp:fallback ~~~~~~~~ can be used to print the message if plugin is working. It is used in jsp:plugin.

============================================================================================================================

ExceptionHandlinginJSP123 :=
~~~~~~~~~~~~~~~~~~~~~~~~~

  In JSP, there are two ways to perform exception handling:

 (1) By errorPage and isErrorPage attributes of page directive
 (2) By <error-page> element in web.xml file 
===========================================================================================================================

 ExampleJSP :=
~~~~~~~~~~~~~

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
        <title>Implicit Objects</title>
    </head>
<body>
    <% String pageName = page.toString();
        out.println("Page Name is " +pageName);
    %>
</body>
</html>

============================================================================================================================

ImplicitObejct123 :=
~~~~~~~~~~~~~~~~~
----> There are 9 jsp implicit objects. These objects are created by the web container that are available to all the jsp pages.

The available implicit objects are out, request, config, session, application etc.

A list of the 9 implicit objects is given below:

     OBJECT          TYPE
    ~~~~~~~~        ~~~~~~
  --- Object ~~~~~~~~ Type
  --- out ~~~~~~~~~~ JspWriter
  --- application~~~ ServletContext
  --- page ~~~~~~~~~ Object
  --- pageContext ~~ PageContext
  --- config ~~~~~~  ServletConfig
  --- exception ~~~~ Throwable
  --- session ~~~~~~ HttpSession
  --- request ~~~~~~ HttpServletRequest
  --- response ~~~~~ HttpServletResponse


JSP config implicit object :=
~~~~~~~~~~~~~~~~~~~~~~~~~~
 --In JSP, config is an implicit object of type ServletConfig. This object can be used to get initialization parameter for a particular web xml. The config object is created by the web container for each jsp page.

  --Generally, it is used to get initialization parameter from the web.xml file.
  
  out.print("Welcome "+request.getParameter("uname"));     // To get values from HTML page....
  String driver=config.getInitParameter("dname");     // To get value from WEB.XML(<init-param>) file
   out.print("driver name is="+driver);  


JSP application implicit object :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --In JSP, application is an implicit object of type ServletContext.

 --The instance of ServletContext is created only once by the web container when application or project is deployed on the server.
 
 --This object can be used to get initialization parameter from configuaration file (web.xml). It can also be used to get, set or remove attribute from the application scope.

 --This initialization parameter can be used by all jsp pages.
 
 
    out.print("Welcome "+request.getParameter("uname"));   // To get values from HTML page....
   String driver=application.getInitParameter("dname");   // To get value from WEB.XML(<context-param>) file
   out.print("driver name is="+driver);  
  
 

session implicit object :=
~~~~~~~~~~~~~~~~~~~~~~
In JSP, session is an implicit object of type HttpSession.The Java developer can use this object to set,get or remove attribute or to get session information.


================/\/\\/\\/\/\/===============/\/\\/\\/\/\======================/\/\\/\\/\/\====================

                                            JSTL123 (JSP Standard Tag Library)
								         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The JSP Standard Tag Library (JSTL) represents a set of tags to simplify the JSP development.

Advantage of JSTL :=
~~~~~~~~~~~~~~~~~
 --Fast Development JSTL provides many tags that simplify the JSP.
 
 --Code Reusability We can use the JSTL tags on various pages.
 
 --No need to use scriptlet tag It avoids the use of scriptlet tag
 
===================================================================================

JSTLTags123 :=
~~~~~~~~~~
 Core tags ~~~~~ http://java.sun.com/jsp/jstl/core. The prefix of core tag is c.
 
 Function tags ~~~~~ http://java.sun.com/jsp/jstl/functions and prefix is fn.
 
 Formatting tags ~~~~~ http://java.sun.com/jsp/jstl/fmt and prefix is fmt.
 
 XML tags ~~~~~ The URL for the XML tags is http://java.sun.com/jsp/jstl/xml and prefix is x.
 
 SQL tags ~~~~~  The URL for the SQL tags is http://java.sun.com/jsp/jstl/sql and prefix is sql.
 
 
===========================================================================================================================

JSTLCoreTagsList123 :=  [ <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %> ]
~~~~~~~~~~~~~~~~~~~~
 

 Tags	              Description
  -----                ----------
 c:out  ~~~~~   It display the result of an expression( similar to JSP expression tag), similar to the way <%=...%> tag work.
  
                 <c:out value="${'Welcome to javaTpoint'}"/>  
			   
  
 c:import  ~~~~~  similar to jsp 'include', used to including the content of any resource either within server or outside the                   server.
    
	           <c:import var="data" url="http://www.javatpoint.com"/>   ///content from javatpoint.com and would store in a variable "data" 
               <c:out value="${data}"/>  
			
  
  c:set  ~~~~~   evaluates the expression and use the result to set a value of java.util.Map or JavaBean in a 'scope' variable.
   
                 <c:set var="Income" scope="session" value="${4000*4}"/>  /// Code Evaluation.
                 <c:out value="${Income}"/>  

 ----------------------------------------------------------------------------------------------------
 
 
  c:remove ~~~~~  It is used for removing the specified scoped variable from a particular scope.
  
                          <c:set var="income" scope="session" value="${4000*4}"/>  
                          <p>Before Remove Value is: <c:out value="${income}"/></p>  
                          <c:remove var="income"/>   ///REMOVED FROM SESSION
                          <p>After Remove Value is: <c:out value="${income}"/></p>  
   
   
  c:catch ~~~~~  catches any exceptions that occurs in a program body. and optionally exposes it.
  
                           <c:catch var ="catchtheException">  
                          <% int x = 2/0;%>  
                          </c:catch>  
                          <c:if test = "${catchtheException != null}">   ///CATCHES EXCEPTION 
                               <p>The type of exception is : ${catchtheException} <br />  
                               There is an exception: ${catchtheException.message}</p>  
                         </c:if>  
  
  c:if ~~~~~  used for testing the condition and it display the body content, if the expression evaluated is true. [AS ABOVE ^^]
  
----------------------------------------------------------------------------------------------------
  
  c:choose, c:when, c:otherwise  ~~~~~  It is the simple conditional tag that includes its body content if the evaluated condition is true.
  
           < c:choose > --- It works like a Java switch statement in which we choose between a numbers of alternatives.
		   
		   < c:when > --- is subtag of <choose > that will include its body if the condition evaluated be 'true'.
		   
		   < c:otherwise > ---  is also subtag of < choose >, runs only if all the prior condition evaluated is 'false'.
		   
		   
		    <c:set var="income" scope="session" value="${4000*4}"/>  
		    <p>Your income is : <c:out value="${income}"/></p>  
		    <c:choose>  ....///SWITCH
		       <c:when test="${income <= 1000}">    ....///IF
 		          Income is not good.  
 		       </c:when>  
 		       <c:when test="${income > 10000}">  
 		           Income is very good.  
 		       </c:when>  
 		       <c:otherwise>       ....///ELSE
 		          Income is undetermined...  
 		       </c:otherwise>  
		    </c:choose>  
		   
		   
 c:forEach ~~~~~  It is the basic iteration tag. It repeats the nested body content for fixed number of times or over collection.
  
  c:forTokens ~~~~~  It iterates over tokens which is separated by the supplied delimeters.

----------------------------------------------------------------------------------------------------

  c:param ~~~~~  It adds a parameter in a containing 'import' tag's URL.
  
  c:redirect ~~~~~  It redirects the browser to a new URL and supports the context-relative URLs.
  
  c:url	It creates a URL with optional query parameters.
 
===========================================================================================================================





