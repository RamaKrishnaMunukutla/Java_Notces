
---->Actually constructor is not got place to call Services.

---->Service calls are usually issued  over http to remote web servers .......
if network connection is slow (or) if web server is buy processing in other requests....
our service call could take some time to return with data.

---->To avoid this time-lagging within constructor, "ngOnInit()" LifeCycle-hook......
is the best place for service calls  .

----> "ngOnInit" executes after the constructor,most commonly used for component initialisation and making service call.

----> call Service in  "ngOnInit" lifecycle-hook.

---->use "HTTP" service to issue web-service calls over HTTP.

----> constructor(private http:Http)
     the constructor in that class has injected dependency on "Http" Service....So, "@Injectable" decorartor is mandatory.





----> the changes we made from "ContainerAndNestedComponent" are..............

db.json:=
~~~~~~~~
{
  "employees": [
    {
      "id": 1,
      "name": "RamaKrishna",
      "age":22,
      "gender": "male"
    
    },
    {
      "id": 2,
      "name": "Rama",
      "age":22,
      "gender": "male"
      
    },
    {
      "id": 3,
      "name": "Krishna",
      "age":22,
      "gender": "male"
     
     
    },
    {
      "id": 4,
      "name": "Radha",
      "age":22,
      "gender": "female"
      
     
    },
    {
      "id": 5,
      "name": "Seetha",
      "age":22,
      "gender": "female"
   }
  ]
}
========================================================================================================================
employee.service.ts :=
~~~~~~~~~~~~~~~~~~~~
import { Injectable } from '@angular/core';
import { Employee } from './employee';
import { Http } from '@angular/http';
import { Observable } from 'rxjs';
import { map } from "rxjs/operators";
import 'rxjs/add/operator/map';
@Injectable({
  providedIn: 'root'
})
export class EmployeeService {

  constructor(private http: Http) { }

  getEmployees(): Observable<Employee[]> {
    return this.http.get(" http://localhost:4000/employees").pipe(map(res => <Employee[]>res.json()));


 //here "map" operator used to converts Observable<Response> to  Observable<Employee[]>
 // "=>" operator converts "response" to "Employee-Object"
 //map( (response:Response) => <Employee[]>response.json() );
  }

}
========================================================================================================================== 
employeelist.component.ts:=
~~~~~~~~~~~~~~~~~~~~~~~~~~
import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';
@Component({
  selector: 'app-employeelist',
  templateUrl: './employeelist.component.html',
  styleUrls: ['./employeelist.component.css'],
  providers:[EmployeeService]
})
export class EmployeelistComponent implements OnInit {

  employees: Employee[];
  //Here "employees" name should be same as specified in db.json.

  constructor(private employeeServ:EmployeeService) {
    
} 


//Below used subscribe method for Observable and .....
   //specified callback method as parameter arrow function and populated to class property "employees"
//Here "=>" receives response employee array data.
  ngOnInit() {
    this.employeeServ.getEmployees().subscribe((empData)=>this.employees=empData);
  }


   //track which radio button is selected
  //To determine which employee display in table
  selectedEmployeeCountRadioButton: string = "all";

 
  //================================================================================
  //Below event-handler method (Has event-data) called when custom-event within our child component is raised....
  //If raised selected-radio-button value passed here
  //this  method will TRACK "radio" button value && update it's value
  onEmployeeCountRadioButtonChange(selectedRadioButtonValue: string): void {
    this.selectedEmployeeCountRadioButton = selectedRadioButtonValue;
    console.log(this.selectedEmployeeCountRadioButton);
  }

  //=======================================================================

  getTotalEmployeeCount(): number {

    return this.employees.length;
  }

  getTotalMaleEmployeeCount(): number {

    return this.employees.filter(e => e.gender === "male").length;
  }

  getTotalFemaleEmployeeCount(): number {

    return this.employees.filter(e => e.gender === "female").length;
  }
 
}
============================================================================================================================= 
employeelist.component.html:=
~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!--   Here EmployeeList--Parent EmployeeCount---Child      -->
<!-- To Nest "Employee-Count" component  into "Employee-List" component  ((Below))-->
<!-- To  bind @input class properties(all,male,female) in employeeCount.ts<==(to)=>
                                                Methods in EmployeeList.ts  -->
<!-- Bind custom event raised by child(employeecount) component  @7th line-->
<app-employee-count *ngIf="employees" [all]="getTotalEmployeeCount()" [male]="getTotalMaleEmployeeCount()"
    [female]="getTotalFemaleEmployeeCount()"
    (countRadioButtonSelectionChanged)="onEmployeeCountRadioButtonChange($event)">
</app-employee-count>
<!-- Here $event gets selected radiobuttonvalue, updates "selectedEmployeeCountRadioButton"  in TS file-->
<table>
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Age</th>
            <th>Gender</th>

        </tr>
    </thead>
    <tbody>
        <ng-container *ngFor="let emp of employees;">
            <tr *ngIf="selectedEmployeeCountRadioButton=='all'||selectedEmployeeCountRadioButton==emp.gender">
                <td>{{emp.id}}</td>
                <td>{{emp.name |employeetitle:emp.gender}}</td>
                <td>{{emp.age}}</td>
                <td>{{emp.gender}}</td>
            </tr>
        </ng-container>
        <tr *ngIf="!employees">
            <td colspan="4">
                Loading data....Please wait.
            </td>
        </tr>
        <tr *ngIf="employees && employees.length==0">
            <td colspan="4">No data Found</td>
        </tr>
    </tbody>
</table>
============================================================================================================================

