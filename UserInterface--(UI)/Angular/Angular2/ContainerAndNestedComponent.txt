
 employeelist ~~~~~~~~~~~ Parent Component
 employee-count ~~~~~~~~~~~ Child Component
 employeeTitle ~~~~~~~~~~Service
==========================================================================================================================
Parent:=
~~~~~~~~
ts:=
~~~
     ListofEmployee[],  methodsOfPipes(male,female,all),   RadioButton(Var),    radioButtonvalue(M)

html:=
~~~~
Binds values of child in parent  with methods using property binding(male<---3....)  ,   tablewith pipe  	 
==========================================================================================================================
Child:=
~~~~~~~~
ts:=
~~~
     @I/p (3), @o/p (2)  ,   RadioButton(Var),    radioButtonvalue(M)

html:=
~~~~
Binds name of radio button 
==========================================================================================================================
employeelist.component.ts:=
~~~~~~~~~~~~~~~~~~~~~~~~~
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-employeelist',
  templateUrl: './employeelist.component.html',
  styleUrls: ['./employeelist.component.css']
})
export class EmployeelistComponent implements OnInit {

  employees: any[];

  //track which radio button is selected
  //To determine which employee display in table
  selectedEmployeeCountRadioButton: string = "all";

  constructor() {

    this.employees = [
      { id: 103, name: 'Seeta', age: 24, gender: 'female' },
      { id: 101, name: 'Rama', age: 27, gender: 'male' },
      { id: 105, name: 'Radha', age: 25, gender: 'female' },
      { id: 102, name: 'Krishna', age: 26, gender: 'male' },
      { id: 104, name: 'RK', age: 23, gender: 'male' },
      { id: 107, name: 'Syana', age: 23, gender: 'other' },
      { id: 108, name: 'libana', age: 20, gender: 'other' }

    ];
 
  }
  //================================================================================
  //Below event-handler method (Has event-data) called when custom-event within our child component is raised....
  //If raised selected-radio-button value passed here
  //this  method will TRACK "radio" button value && update it's value
  onEmployeeCountRadioButtonChange(selectedRadioButtonValue: string): void {
    this.selectedEmployeeCountRadioButton = selectedRadioButtonValue;
    console.log(this.selectedEmployeeCountRadioButton);
  }

  //=======================================================================

  getTotalEmployeeCount(): number {

    return this.employees.length;
  }

  getTotalMaleEmployeeCount(): number {

    return this.employees.filter(e => e.gender === "male").length;
  }

  getTotalFemaleEmployeeCount(): number {

    return this.employees.filter(e => e.gender === "female").length;
  }
  getTotalOtherEmployeeCount(): number {

    return this.employees.filter(e => e.gender === "other").length;
  }
  



  ngOnInit() {
  }

}

==========================================================================================================================
employeeList.component.html:=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<!--   Here EmployeeList--Parent EmployeeCount---Child      -->
<!-- To Nest "Employee-Count" component  into "Employee-List" component  ((Below))-->
<!-- To  bind @input class properties(all,male,female) in employeeCount.ts<==(to)=>
                                                Methods in EmployeeList.ts  -->
<!-- Bind custom event raised by child(employeecount) component  @7th line-->
<app-employee-count [all]="getTotalEmployeeCount()" [male]="getTotalMaleEmployeeCount()"
    [female]="getTotalFemaleEmployeeCount()" [other]="getTotalOtherEmployeeCount()" (countRadioButtonSelectionChanged)="onEmployeeCountRadioButtonChange($event)">
</app-employee-count>
<!-- Here $event gets selected radiobuttonvalue, updates "selectedEmployeeCountRadioButton"  in TS file-->
<table>
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Age</th>
            <th>Gender</th>
          
        </tr>
    </thead>
    <tbody>
        <ng-container *ngFor="let emp of employees;">
          <tr *ngIf="selectedEmployeeCountRadioButton=='all'||selectedEmployeeCountRadioButton==emp.gender"> 
                <td>{{emp.id}}</td>
                <td>{{emp.name |employeeTitle:emp.gender}}</td>
                <td>{{emp.age}}</td>
                <td>{{emp.gender}}</td>
            </tr> 
        </ng-container>

        
<tr *ngIf="!employees || employees.length==0">
          <td colspan="4">No data  Found</td>
      </tr>
    </tbody>
</table>
==========================================================================================================================
employeecount.component.ts:=
~~~~~~~~~~~~~~~~~~~~~~~~~
import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-employee-count',
  templateUrl: './employee-count.component.html',
  styleUrls: ['./employee-count.component.css']
})
export class EmployeeCountComponent implements OnInit {

  //To tarck value of radio button selected && Default value is "all"
  selectedRadioButtonValue: string = 'all';
  //=============================================================

  // To Pass Values from Parent component to Child Component
  //To use values in Parent from child component
  @Input()
  all: number;
  @Input()
  male: number;
  @Input()
  female: number;
  @Input()
  other: number;
 

  //Custom event
  @Output()
  countRadioButtonSelectionChanged: EventEmitter<string> = new EventEmitter<string>();


 // =====================================================================
  //below method will Raise custom event
  //emit method used to raise event by passing selectedRadioButtonValue as  payload
  onRadioButtonSelectionChange() {
    this.countRadioButtonSelectionChanged.emit(this.selectedRadioButtonValue);
    //To test the changes
    //  
  } 
  
 constructor() { }

  ngOnInit() {
  }

}

==========================================================================================================================
employeecount.component.html:=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<span class="radioClass">Show</span>
&nbsp;
<input type="radio" name="options" value="all" [(ngModel)]="selectedRadioButtonValue"
(change)="onRadioButtonSelectionChange()" />
<span class="radioClass">{{"All("+all+")"}}</span>
&nbsp;

<input type="radio" name="options" value="male" [(ngModel)]="selectedRadioButtonValue"
(change)="onRadioButtonSelectionChange()"/>
<span class="radioClass">{{"Male("+male+")"}}</span>
&nbsp;

<input type="radio" name="options" value="female" [(ngModel)]="selectedRadioButtonValue"
(change)="onRadioButtonSelectionChange()"/>
<span class="radioClass">{{"Female("+female+")"}}</span>

<input type="radio" name="options" value="other" [(ngModel)]="selectedRadioButtonValue"
(change)="onRadioButtonSelectionChange()"/>
<span class="radioClass">{{"Other("+other+")"}}</span>

==========================================================================================================================
employee-count.component.css:=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.radioClass{
    color: brown;
    font-family:Verdana, Geneva, Tahoma, sans-serif;
    font-size:large;
    border-collapse: collapse;
}
==========================================================================================================================
employeeTitle:=
~~~~~~~~~~~~~~~~~
import { Pipe, PipeTransform } from '@angular/core';
import { Title } from '@angular/platform-browser';

@Pipe({
  name: 'employeeTitle'
})
export class EmployeeTitlePipe implements PipeTransform {

  transform(value: string,gender:string): string {
    if(gender.toLowerCase()=='male'){
      return "Mr. "+value;
    }
    else if(gender.toLowerCase()=='female'){
      return "Miss. "+value;
    }
    else if(gender.toLowerCase()=='other'){
      return value;
    }
  }

}

==========================================================================================================================
employee.ts:=
~~~~~~~~~~~~~~
export interface Employee {
    id:number,
    name:string;
    age:number;
    gender:string;
}

employees: Employee[]; // add in "EmployeelistComponent" ts file 
==============================================================================================================================
App.component.ts:=
~~~~~~~~~~~~~~~~~
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
<app-employeelist></app-employeelist>
  `,
  styleUrls: ['./app.component.css']
})

export class AppComponent {

   
}
==========================================================================================================================
app.module.ts:=
~~~~~~~~~~~~~
import { EmployeetitlePipe } from './employeetitle.pipe';
import { FormsModule } from '@angular/forms';


@NgModule({
  declarations: [
    AppComponent,
    EmployeelistComponent,
    EmployeeCountComponent,
    EmployeetitlePipe
  ],
  imports: [
    BrowserModule,FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
==============================================================================================================================
CSS:=
~~~~
table{
    color: blue;
    font-family:Verdana, Geneva, Tahoma, sans-serif;
    font-size:large;
    border-collapse: collapse;
    }
    
    h1{
        color: brown;
        font-family:Verdana, Geneva, Tahoma, sans-serif;
        font-size:large;
        border-collapse: collapse;
        }
    
    
    td{
        border: 1px solid black;
    }

     
    td{
        border: 1px solid brown;
    }
==============================================================================================================================









