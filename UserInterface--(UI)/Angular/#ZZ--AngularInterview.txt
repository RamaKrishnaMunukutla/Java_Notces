








=========================================================================================================


       e2e      ----> End to End Testing
   
   node_modules ----> Collection of different libraries
   
     assets --------> Images , Icons , Text Files
	 
	 environment ----> Provides 2-Env :: (1) Prod.ts-Env  , (2) Dev-Env 
	 
	 main.ts --------> BootStraps Main Module (App-Module)
	 
	 tsconfig.json ---> Complies 'TS' Code to 'JS' Code which Browsers can UnderStand 
   
      index.html -----> Bundles Different "DOT_JS' files at RunTime 
	  
	  
  Releases :=
~~~~~~~~~~~~~
  
  Angular-2      ----> 2016
  
  Angular-11 --------> February 2021
  
  ES-6      ---------> 2015
   
   
====================================================================================================

---->What is Angular Framework?
Angular is a TypeScript-based open-source web application framework, developed and maintained by Google. The major features of this framework such as declarative templates, dependency injection, end to end tooling, and many more other features are used to ease the development.

----> Every Application will have One Module && One Component

AngularJS	Angular :=
~~~~~~~~~~~~~~~~~~~~
It is based on MVC architecture	
This is based on Service/Controller

This uses use JavaScript to build the application	
Introduced the typescript to write the application

Based on controllers concept
This is a component based UI approach
 


---->Directives add behaviour to an existing DOM element or an existing component instance.

---->What are the key components of Angular?

 --Component: Components are the most basic UI building block of an Angular app which formed a tree of Angular components to control HTML views. These components are subset of directives.

 --Modules: An angular module is set of angular basic building blocks like component, directives, services etc. An application is divided into logical pieces and each piece of code is called as "module" which perform a single task.

 --Templates: This represent the views of an Angular application.

 --Services: It is used to create components which can be shared across the entire application.

 --Metadata: This can be used to add more data to an Angular class.

---->What is a template?
A template is a HTML view where you can display data by binding controls to properties of an Angular component.You can define it inline using the template property, or you can define the template in a separate HTML file and link to it in the component metadata using the @Component 

import { Component } from '@angular/core';

@Component ({
   selector: 'my-app',
   template: '
      <div>
         <h1>{{title}}</h1>
         <div>Learn Angular</div>
      </div>
   '
})

export class AppComponent {
   title: string = 'Hello World';
}

==================================================================

---->What is a module?
Modules are logical boundaries in your application and the application is divided into separate modules to separate the functionality of your application. Lets take an example of app.module.ts root module declared with @NgModule decorator  .


 Packge.json :=
~~~~~~~~~~~~~
 --- Have Set of Packages that Required to Run Angular Application 
              (1) Dependencies     ---> Essential to Run Application 
			  (2) Dev-Dependencies ---> Necessary to Develop Application 


 Module :=
~~~~~~~~~~
 -- It is a mechanism to group components, directives, pipes and services that are related, in such a way that can be combined with other modules to create an application.
 
 
 
 NgModule :=
~~~~~~~~~~~
 ---It is a decorator function


 Services := Performs task(Data Fetching / Manipulation) Shared by Multiple Components. 
~~~~~~~~~~~  Reduces Redundancy Code. // All Services are Singleton(****)
 
 Decorators :=
~~~~~~~~~~~~~
 ---It allow developers to configure classes as particular elements by setting metadata on them.
 ---Decorators are functions that modify JavaScript classes.
 ---Angular defines a number of decorators that attach specific kinds of metadata to classes, so that the system knows what those classes mean and how they should work.
 
 
 Components :=
~~~~~~~~~~~~~~
 --These are a logical piece of code for Angular JS application. A Component consists of the following −

 Template − This is used to render the view for the application. This contains the HTML that needs to be rendered in the application. This part also includes the binding and directives.

 Class − This is like a class defined in any language such as C. This contains properties and methods. This has the code which is used to support the view. It is defined in TypeScript.

 Metadata − This has the extra data defined for the Angular class. It is defined with a decorator.

 
---->What is the use of ngOnInit in angular?
ngOnInit is a life cycle hook called by Angular to indicate that Angular is done creating the component. Implement this interface to execute custom initialization logic after your directive's data-bound properties have been initialized.
 ---Defaults call this method (*********)
 
 
  Forms :=
~~~~~~~~~~
 ---FormControl instance tracks the value and state of the individual html element it is associated with
 ---FormGroup instance tracks the value and state of all the form controls in it's group
 
 
 Dependency injection :=
~~~~~~~~~~~~~~~~~~~~~~
 --- It is a design pattern in which a class requests dependencies from external sources rather than creating them. 
 
 
 @Injectable :=
~~~~~~~~~~~~~~
 --- Set some metadata about which dependencies to inject into the constructor of the associated class. 
 --- It's a class decorator that doesn't require parameters. 
 --- Without this decorator no dependency will be injected.
 
            Module Injector Hierarchy  ---->  @NgModule , @Injectable   
			
		   Element Injector Hierarchy  ---->  @Directive , @Component 
 
 
 
 @Inject :=
~~~~~~~~~~
  --- Used at the level of constructor parameters to specify metadata regarding elements to inject. 
  --- Without it, the type of parameters is used (obj:SomeType is equivalent to @Inject(SomeType) obj).

@Injectable()
export class SomeService {
  constructor(@Inject(Http) private http:Http, @Inject('sometoken') obj) {
  }
}


 Promises := Emits Single Value  /// Not Lazy   
~~~~~~~~~~~
 
 
 Observable := Emits Multiple Values Over Period of Time  ///  It is HHTP Response that arrives Asynchronously. 
~~~~~~~~~~~ - It is The Response(Data which we get from  Database ---> HTTP-Response)  //// ONly --GET--
                           that is done through HTTP with the help of Restful-Services    (***********)   
			-- Only 'Subscribed' Components will receive Data from Services ///Assign to Local Variables .  (***********)
            -- After Subscribing, it is upto  Components What they want to do with that data.(***********)	
			
			
 Map := Transforms data in Obervable to desirable format. 
~~~~~
 
 
 Filter :=   Allows data which meets Condition. 
~~~~~~~~~~~
			
			
 Providers :=
~~~~~~~~~~~~
 --- Injectors always rely on Providers to Inject Dependencies. (***********)

  

 MetaData :=
~~~~~~~~~~~~
 -- Tells Angular How to process Class.
 
 
 Decarator :=
~~~~~~~~~~~~~
 --- Angular Provides MetaData through 'Decarator' .  /// Eg :: @NgModule  /// Part of TypeScript  
 
 
           Parts of @NgModule ---> Declarations [Comp], Providers[Serv] , imports[Mod] , BootStrap , Exports 
          ~~~~~~~~~~~~~~~~~~~~~
 
 
 RootModule (AppModule) :=
~~~~~~~~~~~~~~~~~~~~~~~~
 --- It Set-Up's Exceution of App /// BootStraps RootComponent /// One Application can have Multiple-Module (*****)


  Selectors :=
~~~~~~~~~~~~~~
 --- Wrapper around Native element inside View. 
 
 
 ElementRef :=
~~~~~~~~~~~~~~


  @HostBinding := Decorator allows you to set Properties of host Elements 
~~~~~~~~~~~~~~~~

  @HostListener := Handles Events of Host elements in Directive Class. 
~~~~~~~~~~~~~~~~



 Components := Control views (html). 
~~~~~~~~~~~~~  They also communicate with other components and services to bring functionality to your app.


 MVC In Component :=
~~~~~~~~~~~~~~~~~~~
 --- Supported in Component Level Itself 
 
                          Model ---> Bindings ////  View ---->  Template    //// Controller ----> Cpomponent 
 
 
   Parent to Child := @Input 
 ~~~~~~~~~~~~~~~~~~~~
 

   Child to Parent :=  @Outputs && Need Event ('EventEmitter')has to Trigger. 
 ~~~~~~~~~~~~~~~~~~~~

 
		


 FormGroup :=  Represents Group of 'FormControl' /// Returns TRUE if all Controls are Valid (****)
~~~~~~~~~~~~  Used to track the value and validation state of form control.
               used with FormControl and FormArray


 FormControl := It is Class that Enables Validation. //// It is used to create Angular reactive form.
~~~~~~~~~~~~    For Each Input Feild , Instance of Class Created that helps to check whether Touched (Or) Not .  (****)


Reactive Form := Creating form using FormControl, FormGroup and FormArray is said to be reactive form.
~~~~~~~~~~~~~~  They use ng module asReactiveFormsModule.
  
  
 Template-Driven Form := Creating form using NgForm and NgModel, is said to be template-driven form. 
~~~~~~~~~~~~~~~~~~~~~~~  They use ng module as FormsModule.


 Template :=  Used to render the component in angular application.
~~~~~~~~~~~




  Routing :=
~~~~~~~~~~~~
 --- That helps to Navigate through Application.
 --- Especially in SPA, loads Content Dynamically 


 Module := It is  place where you can group the components, directives, pipes, and services and so On in  application
~~~~~~~~~
 ---> module defines an application //// It is a container for the different parts of an application.


 AOT (Ahead of Time):= Convert Code to Build time before Browser Downloads and runs the code. /// Ensures Fast-Rendering.  
~~~~~~~~~~~~~~~~~~~~~


 JIT (Just In Time):= Compile Source-Code to Machine-Code during Exceution (Or) Runtime.  /// Dynamic-Compilation
~~~~~~~~~~~~~~~~~~~~~



===============================================================================================================


 RxJS filter := It is used to filter values emitted by source Observable on the basis of given predicate. 
~~~~~~~~~~~~~~~


 RxJS Map :=  
~~~~~~~~~~
 --- It is pipeable operator that  applies a given function to each element emitted by the source Observableand emits the resulting values as an Observable. 
 --- Map is used with pipe which is an instance method of Observable. 
 --- Suppose we have an Observable of a string that contains comma separated names.



 @Inputs :=
~~~~~~~~~~


 @Outputs :=
~~~~~~~~~~

=============================================================================================================

 App Flow :=
~~~~~~~~~~~
           Angular CLI 
 index.html ---> main.ts (BootStarp    RootModule  :: AppModule )  

   AppModule --->         BootStrap  RootComponent :: AppComponent


=============================================================================================================
---->What are lifecycle hooks available?
Angular application goes through an entire set of processes or has a lifecycle right from its initiation to the end of the application. The representation of lifecycle in pictorial representation as follows, ScreenShot.The description of each lifecycle method is as below,

 ngOnChanges: When the value of a data bound property changes, then this method is called.
 
 ngOnInit: This is called whenever the initialization of the directive/component after Angular first displays the data-bound properties happens.
 
 ngDoCheck: This is for the detection and to act on changes that Angular can't or won't detect on its own.
 
 ngAfterContentInit: This is called in response after Angular projects external content into the component's view.
 
 ngAfterContentChecked: This is called in response after Angular checks the content projected into the component.
 
 ngAfterViewInit: This is called in response after Angular initializes the component's views and child views.
 
 ngAfterViewChecked: This is called in response after Angular checks the component's views and child views.
 
 ngOnDestroy: This is the cleanup phase just before Angular destroys the directive/component.


---->What is the difference between constructor and ngOnInit?
TypeScript classes has a default method called constructor which is normally used for the initialization purpose. Whereas ngOnInit method is specific to Angular, especially used to define Angular bindings. Even though constructor getting called first, it is preferred to move all of your Angular bindings to ngOnInit method. In order to use ngOnInit, you need to implement OnInit interface .

  Eg :=
 ~~~~~
    constructor(){
          //called first time before the ngOnInit()
      }
    ngOnInit(){
          //called after the constructor and called after the first ngOnChanges()
     }


---->What is a service?
A service is used when a common functionality needs to be provided to various modules. Services allow for greater separation of concerns for your application and better modularity by allowing you to extract common functionality out of components. Let's create a repoService which can be used across components,

import { Injectable } from '@angular/core';   ..... /// decorator identifies every service class
import { Http } from '@angular/http';

@Injectable({ // The Injectable decorator is required for dependency injection to work
  // providedIn option registers the service with a specific NgModule
  providedIn: 'root',  // This declares the service with the root app (AppModule)
})
export class RepoService{
  constructor(private http: Http){
  }

  fetchAll(){
    return this.http.get('https://api.github.com/repositories');
  }
}
 
 
 
---->What is the purpose of async pipe?
AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes. 


---->Angular ngFor directive in the template to display each item in the list. 


---->ngIf directive?
Sometimes an app needs to display a view or a portion of a view only under specific circumstances. The Angular ngIf directive inserts or removes an element based on a truthy/falsy condition.


---->What is Interpolation ??
 The text between the braces is often the name of a component property.It is represented by double curly braces({{}}).It is a special syntax that Angular converts into property binding. It’s a convenient alternative to property binding. 


---->What are template statements?
A template statement responds to an event raised by a binding target such as an element, component, or directive. The template statements appear in quotes to the right of the = symbol like (event)="statement". Let's take an example of button click event's statement
                  
				  <button (click)="editProfile()">Edit Profile</button>


---->What are pipes?
A pipe takes in data as input and transforms it to a desired output. For example, let us take a pipe to transform a component's birthday property into a human-friendly date using date pipe.
import { Component } from '@angular/core';

@Component({
  selector: 'app-birthday',
  template: `<p>Birthday is {{ birthday | date }}</p>`
})
export class BirthdayComponent {
  birthday = new Date(1987, 6, 18); // June 18, 1987
}

---->What is the difference between pure and impure pipe?
A pure pipe is only called when Angular detects a change in the value or the parameters passed to a pipe. For example, any changes to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object). An impure pipe is called for every change detection cycle no matter whether the value or parameters changes. i.e, An impure pipe is called often, as often as every keystroke or mouse-move.


---->What is a bootstrapping module?
Every application has at least one Angular module, the root module that you bootstrap to launch the application is called as bootstrapping module. It is commonly known as AppModule.


---->What are observables?   .....///  .subscribe(( ) =>   = { });
They are mainly used for event handling, asynchronous programming, and handling multiple values.Observables are declarative which provide support for passing messages between publishers and subscribers in your application.  In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.

 
---->What is HttpClient and its benefits?
Most of the Front-end applications communicate with backend services over HTTP protocol using either XMLHttpRequest interface or the fetch() API. Angular provides a simplified client HTTP API known as HttpClient which is based on top of XMLHttpRequest interface. This client is avaialble from @angular/common/http package.

   ----Supports Observalbe APIs.
   
   ----Provides typed request and response objects.


---->HttpClient.get() method returns an Observable of typed HttpResponse rather than just the JSON data.


---->What is RxJS?
RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. Many APIs such as HttpClient produce and consume RxJS Observables and also uses operators for processing observables. For example, you can import observables and operators for using HttpClient as below,
  import { Observable, throwError } from 'rxjs';
  import { catchError, retry } from 'rxjs/operators';


---->What is subscribing?
An Observable instance begins publishing values only when someone subscribes to it. So you need to subscribe by calling the subscribe() method of the instance, passing an observer object to receive the notifications.

---->What are dynamic components?
Dynamic components are the components in which components location in the application is not defined at build time.i.e, They are not used in any angular template. But the component is instantiated and placed in the application at runtime.

---->What is router outlet?
The RouterOutlet is a directive from the router library and it acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component

---->How do you define routes?
A router must be configured with a list of route definitions. You configures the router with routes via the RouterModule.forRoot() method, and adds the result to the AppModule's imports array.

---->What is the purpose of Wildcard route?
If the URL doesn't match any predefined routes then it causes the router to throw an error and crash the app. In this case, you can use wildcard route. A wildcard route has a path consisting of two asterisks to match every URL. For example, you can define PageNotFoundComponent for wildcard route as below
     { path: '**', component: PageNotFoundComponent }


Decorator :=
~~~~~~~~~~
  Separate decoration (or) Modification of class without altering original SourceCode.

---->

---->

---->

---->

---->

---->

---->

 
==============================================================================================
     
	 

 
 
 
 
 
 
 