


  DataBinding330......ComputedProperties30.....Directives80.......Watch55......Events900......CustomDirective50....
  
  
  FormControl60.......Modifiers50.....Filter20......ComputedProperties30.......ConditionalBlock........Routing40.....
  
  
  Components750.......VueJSCommands
  
  
    https://github.com/gopinav/Vue-3-Tutorials
  
  
=============================================================================================================================================

 <Script> :=
~~~~~~~~~~~
  name.....data....methods....computed.....watch.....props....provide 
  
  
  data  --------> Varaible data 
  
  
 Components ----> Inside <Script> block  
                  Under 'export default' Block 

=============================================================================================================================================

 VueJs := [  ]
~~~~~~~~
 --- It is component based architecture
 --- It has Devtool && has declarative model
 --- All the Vue components are also the Vue instances.
 
  
  WokrFlow :=
~~~~~~~~~~~~~

  index.html ----> main.js -----> App.vue 
 
 
 Dot Vue file :=
~~~~~~~~~~~~~~
 --- Known as Single file Components (SFC)
 --- Consists of three types of top level blocks 
 
  (a) <template></template>  -----> HTML for UI 
  (b) <script></script>      -----> Maintains Logic && Functionality of App  
  (c) <style></style>        -----> CSS Block 

====================================================================================================================================
 
  DataBinding330 :=  [ https://www.tutorialspoint.com/vuejs/vuejs_binding.htm ]
~~~~~~~~~~~~~~~~~~

  name: "Rama"
  channel :"codeEvolution"


 v-bind  -----> Used to bind Non-String values (******) 
---------
   <div v-text="name">Hello</div>  ---- Complie-Time-Error    
   <div v-text="channel"></div>  ---- GOOD
   <div v-bind:id="channel1"></div>  ---- GOOD  
   
   
    <a href = "{{hreflink}}"      target = "_blank">Click Me </a> <br/>
    <a v-bind:href = "hreflink"   target = "_blank">Click Me </a> <br/>  ////// hreflink : "http://www.google.com"
    <input v-model.trim = "message">
	
	
 Eg1 :=
~~~~~~
         .info {
            color: #00529B;
            background-color: #BDE5F8;
         }
	------------------
    <div id = "classbinding">
    <div class = "info"  v-bind:class = "{ active: isActive, 'displayError': hasError }">
            {{title}}
         </div>
      </div>
  -------------------
       el: '#classbinding',
       data: {
               title : "This is class binding example",
               isActive : false,
               hasError : false
            }
   
   
     
            channel:'<b>App_Dev</b>' ----->  <div v-html="channel"></div>
   
  
  Eg2 :=
~~~~~~~~
      <div id = "classbinding">
         <div v-bind:class = "[infoclass, errorclass]">{{title}}</div>
      </div>
      <script type = "text/javascript">
         var vm = new Vue({
            el: '#classbinding',
            data: {
               title : "This is class binding example",
               infoclass : 'info',
               errorclass : 'displayError'
            }
         });  

=======================================================================================================================================

 Directives80 :=
~~~~~~~~~~~~~~~
    v-for, v-if, v-else, v-show, v-on, v-bind, and v-model, v-on
	
	v-once , v-pre , v-model 
	
 
	v-bind:id
	v-bind:disabled
	v-bind:class
	
	v-show (always in DOM unlke v-if)
	
	
	v-model ----> Data will be binded to Variable in <SCRIPT> tag //////  can be viewed through adding "Vue.js devtools" Extension to browser 
	    
	
     v-bind ----> <input type = "text" v-model = "kilometers">
  -------------
	 buttonclickedonce : function() {
    this.clicknum++;
   },
   buttonclicked : function() {
   this.clicknum1++;
  }
   
   
   <input type = "text"  v-on:keyup.enter = "showinputvalue"/>  ----> Key-Modifiers we can control the event handling
    <input type = "text" v-on:keyup.enter = "showinputvalue" v-bind:style = "styleobj" placeholder = "Enter your name"/>
   
   <a href = "http://www.google.com" v-on:click.prevent = "clickme" target = "_blank" v-bind:style = "styleobj">Click Me</a>
	<div v-bind:style = "styleobj" v-on:mouseover = "changebgcolor" v-on:mouseout = "originalcolor"></div>
	
	
	               <script type = "text/javascript" src = "js/vue_instance.js"></script>
	               <script type = "text/javascript" src = "js/vue_template1.js"></script>


 In Vue.Js :=
~~~~~~~~~~~~
 --- Methods are declared in Double_Quotes("--")   
   
     <button v-on:click="logicHere">Change name </button> 
	 
--- If Method takes paarmeter 

    <button v-on:click="logicHere(5)">Change name </button>
	


 Watch55 {...} :=
~~~~~~~~~~~~~
 --- Methods present inside Watch used to get alert when   Variable reached to  'certianNumber'  (***********) 
 
           Eg ----> Alert message when we Increase beyond certain limit 
 
=====================================================================================================================================

 Events900 := 
~~~~~~~~~ 
  
   v-on:click
   v-on:mouseover
   
	<button v-on:click = "displayLanguage(item)"><span style = "font-size:25px;">{{ item }}</span></button>
	 
	 	
	 
	v-on:click / @click -----> <h2> {{ name}}
	                           <button v-on:click=" name='Batman' ">Change name </button> 
	                           return  {
	                           name : 'Rama'   //// --- Variables declared here are Global to Methods (*******)
	                            }

								
	<button v-on:click = "displaynumbers">Click ME</button>
	<button @click = "displaynumbers">Click ME</button>
	
	
	<button v-on:click.once = "buttonclickedonce" v-bind:style = "styleobj">Click Once</button> 
	
	
 Event Object :=
~~~~~~~~~~~~~~~
 --- Gives more information of event itself 
 --- Vue automaically passes Event-Object as parameter to event-Handler

       Eg ---->  <button @click="logicHere(1, $event)">Change name </button> 
               logicHere(num, event){
			      this.count=num;
                  cosole.log('Event', event)
               }

     
      Eg2 ----> <button v-on:click=" name( $event), increment(1, $event) ">Change name </button> 
	               return  {
	                        name : 'Rama'   //// --- Variables declared here are Global to Methods (*******)
	                       }	 
	
=======================================================================================================================================

 CustomDirective50 :=   
~~~~~~~~~~~~~~~~~~~~~
 --- Can create a directive using 'Vue.directive'

 Eg1 :=
~~~~~
         Vue.directive("changestyle",{
            bind(e1,binding, vnode) {
               console.log(e1);
               e1.style.color = "red";
               e1.style.fontSize = "30px";
            }
         });
         var vm = new Vue({
            el: '#databinding',
            data: {
            },
            methods : {
            },
         });
		 
=======================================================================================================================================

 FormControl60 (Two_way_Binding) :=  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Binds the 'dynamicValue(TEMPLATE)_to_variable' which is present in SCRIPT tag  && ViceVersa
 
      Eg ---> <input type="text" id="name" v-model="formValues.name">
	           formValues{
			     name: ''
				}
=======================================================================================================================================
 
 Modifiers50 := 
~~~~~~~~~~~~~~~~
     Tab .....Escape......delete...key...Space....ArrowKeys.......Cntrl+Alt+Shft......Mousebuuton

  
				 
 TRIM ----> <input type="text" id="name" v-model.trim ="formValues.name">
~~~~~~~~

 NUMBER ----> <input type="text" id="name" v-model.number ="formValues.name">   //// Stored as 'Number_Format' Only (default takes as String)
~~~~~~~~~

 LAZY ----->  <input type="text" id="name" v-model.trim.lazy ="formValues.name">  //// Value Stored , Only when Clicked Outside Text-Area  
~~~~~~~~

 PREVENT ---->  <form @submit.prevent="submitForm">
~~~~~~~~~~

 KEY-UP ----->  <input @keyup.enter="inputForm" type="text" id="name" v-model.number ="formValues.name">
~~~~~~~~~



=============================================================================================================================================

 Filter20 :=    
~~~~~~~~~~~~
   <span style = "font-size:25px;"><b>Letter count is : {{name | countletters}}</b></span>

==============================================================================================================================================

  ComputedProperties30 :=
~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- These properties can be bound to template like data properties
 --- Composes data from existing sources  
 --- We can 'sort' / 'concatinate' / 'filter' data in <Script> tag itself rather than <Template> tag (*************)
 
 
  Eg ----> computed : {
~~~~~~       fullName(){
			     return `${this.firstName} ${this.lastName}`   
		      }		  
           }
 
  Computed Setter :=
~~~~~~~~~~~~~~~~~~~~
 --- Used to store the response 
 --- For Read && Write purpose 
 
   Eg ----> computed : {
 ~~~~~~        fullName:{ 
                   get() {
				     return `${this.firstName} ${this.lastName}` },
                   set() {
				     const names = value.split(' ')
					 this.firstName = names[0]
					 this.lastName  = names[0]   } 
    			 }
 
 
 
   computed property ----> random numbers returned SAME 
    method  property ----> random numbers returned DIFFERENT 

=======================================================================================================================================

 ConditionalBlock  :=  [ https://www.tutorialspoint.com/vuejs/vuejs_rendering.htm ]
~~~~~~~~~~~~~~~~~~~~~

  ---> v-if //// v-else ///// v-else-if //// v-show 
  
  
  <h1 v-if = "num === 0">This is Equals to 5</h1>
  <h1 v-else-if = " num > 0 ">This is Greater than 5</h1>
  <h2 v-else>This is Not a number</h2>
	
	  num:5
	
	 
	   For_loop ---> https://www.tutorialspoint.com/vuejs/vuejs_rendering.htm
	
	
 Key attribute :=
~~~~~~~~~~~~~~~~
 --- recommanded to provide key-attribute with v-for directive
 --- It identifies which items in items have changes/added/removed 
 --- Handles UI updates efficiently 
	
=================================================================================================================================================
 
 Components750 :=    (Add Plugin "vs code snippet" ///// type 'vbase-css' in new component)
~~~~~~~~~~~~~~~~~~

         Props40.......Slots40..........ProvideAndInject.......CustomComponentEvents
   
   
   Export ----> Created component
   Import ----> app.Vue 
   Include ---> root component 'template'


   
  export default {
     name: 'Greet',
  }
------------------------  
  import Greet from './components/Greet.vue'  
  components: {
    Greet 
	}
-----------------------
  <Greet>  <Greet/>    
  
 
 
 
 Props40 :=
~~~~~~~~~
 --- Thses are custom attributes 
 --- It can register to component which allows component content dynamic 
 --- Binds 'Data' & 'Computed' properties 
 --- Binds data from PARENT-template to CHILD-script (******)
 --- Need to follow TREE-PATTERN (******)
 
                           Static ----> <Greet name="Navin" channel="Telusko" />
						  Dynamic ----> <Greet name="name"  channel="channel" />
						  
========================================================================

 Slots40 :=
~~~~~~~~~~~ 
 --- Allows parent component to control Content && embed inside Child-component include HTML elements 
  

========================================================================
						  
  ProvideAndInject :=
~~~~~~~~~~~~~~~~~~~~~
 --- Can pass data through different-Components from root-component unlike PROPS at every level (******)
 --- 2 Steps need to follow :: (1) Provide in Root(App) component 
                               (2) Inject in desired Component  (No Need to follow TREE Structure)  //// Does not allows to bind 'Property' to 'Template' 
		
  Eg :=
~~~~~~~  
   data() {
     return {
       name: 'Vishwas'
   }
     provide() {
    return {
      userName: this.name,
    }
  }
-----------Under_Script----------- 
   <h3>Component F username - {{ userName }}</h3>  
 export default {
    name: 'ComponentF',
    inject: ['userName'],
 }

===========================================================
                                 ******
 CustomComponentEvents :=  (Child ---> Parent)   ////// Props :: (Parent ---> Child)
~~~~~~~~~~~~~~~~~~~~~~~~
 --- We can pass data from parent-component to child-component 
   
     name:popUp
	 emits: ['close']
	 data() {
       return {
                showPopup: false,
		      }
		   }
  -----------------------
   <button @click="$emit('close')">Close Popup</button>
 ----------------------
    <Popup v-show="showPopup" @close="showPopUp=false" />   //// Parent-Component 
	
	
	
----> Passing data from parent-component to child-component

   <button @click="$emit('close', name)">Close Popup</button>
 -------------------
   methods: {
    closePopup(name) {
      this.showPopup = false
      console.log('name', name)
    },
  },


 Validating Emmited event :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  emits: {
    close: (name) => {
      if (!name) {
        console.warn('Invalid submit event payload!')
        return false
       } else {
         return true
       }
     },
   },
 }

=================================================
 
 DynamciComponents :=
~~~~~~~~~~~~~~~~~~~~~
 --- Displays Components dynamically based in User-Input 
 
 
  <button @click="activeTab = 'TabA'">Tab A</button>
  <button @click="activeTab = 'TabB'">Tab B</button>
  <button @click="activeTab = 'TabC'">Tab C</button>

  <keep-alive>                       -----------------> Keeps Data in Tab Alive when user switching between Tabs (*****)
    <component :is="activeTab"></component>
  </keep-alive>
 -----------------------------
   activeTab: 'TabA',

=================================================================================================================================================

 Routing40 :=
~~~~~~~~~~

  <script src = "/path/to/vue.js"></script>
  <script src = "/path/to/vue-router.js"></script>
  
  <script type = "text/javascript" src = "js/vue.js"></script>
  <script type = "text/javascript" src = "js/vue-router.js"></script>

===================================================================================================================================================


===================================================================================================================================================


===================================================================================================================================================


=================================================================================================================================================== 
 
 
===================================================================================================================================================


===================================================================================================================================================

===================================================================================================================================================


===================================================================================================================================================


===================================================================================================================================================


=================================================================================================================================================== 
 
 
===================================================================================================================================================


===================================================================================================================================================

  VueJSCommands :=  ( Install -Node- )
~~~~~~~~~~~~~~~~~~

  npm install vue@next 
  npm install -g @vue/cli
  npm install -g yarn
  yarn global add @vue/cli
  vue --version
  
  npm install vue-router@4  ////// npm install axios
  
  
  npm install bootstrap@4.0.0-beta popper.js jquery --save-dev
  
  
  vue create hello-world
  yarn serve   ///// npm run serve  (Into Project)
  yarn add axios 
  
  
  yarn serve --port 7000 //////  npm run serve --port 9000
  
  
  npm install  ////  yarn install
  npm update -g @vue/cli


  Routing ----> npm  install vue-router


========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================




