

 nxzAAC1EQAAU7AGY8gUQnev_99A
    
  https://gist.github.com/FeatureSpitter/6fcf696dc51736b0e16a42d8ae70bb12
http://134.209.29.209/swagger-ui/index.html?configUrl=/api-docs/swagger-config

   https://github.com/oktaykcr/vuejs-springboot-crud
   https://github.com/oktadev/okta-kotlin-spring-boot-vue-example
   https://github.com/oktaykcr/vuejs-springboot-crud
   https://github.com/jaypee01/featurefitter/pull/1/files
   https://github.com/javatodev/vue-js-base-project/tree/main/src
   https://github.com/javatodev/vue-js-base-project
   
   
   https://www.springboottutorial.com/spring-boot-vue-full-stack-crud-maven-application
   https://www.baeldung.com/spring-boot-vue-js
   https://kotlinlang.org/docs/getting-started.html
 
   https://bezkoder.com/spring-boot-vue-js-authentication-jwt-spring-security/
   https://bezkoder.com/spring-boot-vue-js-crud-example/
   https://spring.io/guides/tutorials/spring-boot-kotlin/
   
   
   https://www.knowledgefactory.net/2021/01/kotlin-spring-boot-mongo-db-vuejs-crud.html  (*******)
   https://github.com/knowledgefactory4u/kotlin_spring_vue_mongo_crud (***)
   https://github.com/in28minutes/spring-boot-vuejs-fullstack-examples  (*****Examples*****)
   
   
   https://hibbard.eu/filterable-table-vuejs/  (---Filter----)
   https://dev.to/rtficial/kotlin-coroutines-and-retrofit-a-practical-approach-to-consuming-rest-apis-in-android-446k
   
   
   https://titanwolf.org/Network/Articles/Article?AID=2804b980-0ac2-4042-8d8a-9f4ef63d3b28#gsc.tab=0   (--RestTemplate--)
   https://gist.github.com/CalamarBicefalo/ef69db4ee297b2eba925150724150027
   
   
   codevolution....Travesery(2)..freecamP(1)
   
   
   https://www.youtube.com/watch?v=e-E0UB-YDRk&ab_channel=Bitfumes
   https://stackoverflow.com/questions/54393321/filter-table-rows-with-vue


========================================================================================================================================================
 Intro :=
~~~~~~~~
 --- It  is a statically-typed, general-purpose programming language. It is widely used to develop android applications.
 --- It runs on JVM and can be used anywhere Java is used today. I
 --- Kotlin was developed by JetBrains team and officially, first released in February 2016. //// Kotlin was developed under the Apache 2.0 license
 ---
 ---
 ---
 ---
 


========================================================================================================================================================

 Difference between var && val :=
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- The difference between var and val is that variables declared with the var keyword can be changed/modified,
     while val variables cannot


----> Unlike many other programming languages, variables in Kotlin do not need to be declared with a specified type (like "String" for text or "Int" for numbers, if you are familiar with those).

----> A String in Kotlin is an object, (*******)

                    var name: String = "John" // String
                    val birthyear: Int = 1975 // Int
					val myLetter: Char = 66 && print  // Error ---> cannot use ASCII values to display certain characters
					
					   100  ----> Operand 	
					    +   ----> Operater 
					
					
 The general rule for Kotlin variables are:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 --- Names can contain letters, digits, underscores, and dollar signs
 --- Names should start with a letter
 --- Names can also begin with $ and _ (but we will not use it in this tutorial)
 --- Names are case sensitive ("myVar" and "myvar" are different variables)
 --- Names should start with a lowercase letter and it cannot contain whitespace
 --- Reserved words (like Kotlin keywords, such as var or String) cannot be used as names
 
 
 
    Integer types ---->  Byte, Short, Int and Long.
    Floating point ----> Float and Double


  
  Arrays :=
~~~~~~~~~~
 --- To create an array, use the arrayOf() function, and place the values in a comma-separated list inside it:
 
          val cars = arrayOf("Volvo", "BMW", "Ford", "Mazda")
		  for (x in cars) {
             println(x)
          }
	-------------------------	  
		  for (chars in 'a'..'x') {   /// takes One Input && Returns one-Output 
             println(chars)
          }
    -------------------------  
		  for (nums in 5..15) {
             println(nums)
          }
    -------------------------
		  fun myFunction(x: Int): Int {
		    return (x + 5)
		  }

		  fun main() {
 		    var result = myFunction(3)
            println(result)
          }
  -------------------------



========================================================================================================================================================

 OOps :=
~~~~~~~
 --- OOP helps to keep the Kotlin code DRY "Don't Repeat Yourself",
 --- DRY  principle is about reducing the repetition of code

 Eg1 :=
~~~~~~
val c1 = Car()

// Access the properties and add some values to it
c1.brand = "Ford"
c1.model = "Mustang"
c1.year = 1969

println(c1.brand)   // Outputs Ford
println(c1.model)   // Outputs Mustang
println(c1.year)    // Outputs 1969



========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================



========================================================================================================================================================



========================================================================================================================================================

  https://github.com/jaypee01/featurefitter/pull/1/files
  https://gist.github.com/FeatureSpitter/6fcf696dc51736b0e16a42d8ae70bb12
http://134.209.29.209/swagger-ui/index.html?configUrl=/api-docs/swagger-config

   https://github.com/oktadev/okta-kotlin-spring-boot-vue-example
   https://github.com/oktaykcr/vuejs-springboot-crud
   https://github.com/javatodev/vue-js-base-project/tree/main/src
   https://github.com/javatodev/vue-js-base-project
   https://github.com/oktaykcr/vuejs-springboot-crud
   
   https://www.springboottutorial.com/spring-boot-vue-full-stack-crud-maven-application
   https://www.baeldung.com/spring-boot-vue-js
   https://kotlinlang.org/docs/getting-started.html
   https://bezkoder.com/spring-boot-vue-js-authentication-jwt-spring-security/
   https://bezkoder.com/spring-boot-vue-js-crud-example/
   https://spring.io/guides/tutorials/spring-boot-kotlin/
   
   
   https://www.knowledgefactory.net/2021/01/kotlin-spring-boot-mongo-db-vuejs-crud.html  (*******)
   https://github.com/knowledgefactory4u/kotlin_spring_vue_mongo_crud (***)
   https://github.com/in28minutes/spring-boot-vuejs-fullstack-examples  (*****Examples*****)
   
   
   https://hibbard.eu/filterable-table-vuejs/  (---Filter----)
   https://dev.to/rtficial/kotlin-coroutines-and-retrofit-a-practical-approach-to-consuming-rest-apis-in-android-446k
   
   
   codevolution....Travesery(2)..freecamP(1)
   
   
   https://www.youtube.com/watch?v=e-E0UB-YDRk&ab_channel=Bitfumes
   https://stackoverflow.com/questions/54393321/filter-table-rows-with-vue
   
   
========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================


========================================================================================================================================================



========================================================================================================================================================


========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================



========================================================================================================================================================



========================================================================================================================================================


========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================


========================================================================================================================================================





========================================================================================================================================================


========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================



========================================================================================================================================================



========================================================================================================================================================


========================================================================================================================================================



=========================================================================================================================================================


==========================================================================================================================================================


========================================================================================================================================================












































































































































